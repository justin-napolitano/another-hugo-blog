<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Wrangling on Justin&#39;s Data Blog</title>
    <link>https://blog.jnapolitano.io/categories/data-wrangling/</link>
    <description>Justin&#39;s Data Blog (Data Wrangling)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 May 2022 01:30:32 +0000</lastBuildDate>
    
    <atom:link href="https://blog.jnapolitano.io/categories/data-wrangling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quantitative Julia Problems</title>
      <link>https://blog.jnapolitano.io/posts/pi-with-julia/</link>
      <pubDate>Tue, 24 May 2022 01:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/pi-with-julia/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In my &lt;a href=&#34;https://blog.jnapolitano.io/posts/rocky-linux-8-julia/&#34;&gt;previous post&lt;/a&gt;, I demonstrated how to configure Rocky Linux and RHEL distributions for quantitative analysis.&lt;/p&gt;
&lt;p&gt;In this post, I include a few sample programs to test your installation.&lt;/p&gt;
&lt;h2 id=&#34;how-to-run-the-programs&#34; &gt;How to run the programs
&lt;span&gt;
    &lt;a href=&#34;#how-to-run-the-programs&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I saved them to a folder within the project directory.&lt;/p&gt;
&lt;h3 id=&#34;activate-the-project&#34; &gt;Activate the Project
&lt;span&gt;
    &lt;a href=&#34;#activate-the-project&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Pkg
Pkg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;activate(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;#cd(&amp;#34;&amp;lt;sub-directory-containing-files&amp;gt;) optional&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;run-a-program&#34; &gt;Run a program
&lt;span&gt;
    &lt;a href=&#34;#run-a-program&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Julia&#34; data-lang=&#34;Julia&#34;&gt;
include(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path/to/script-name.jl&amp;#34;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;estimate-the-value-of-pi&#34; &gt;Estimate the Value of Pi
&lt;span&gt;
    &lt;a href=&#34;#estimate-the-value-of-pi&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Use the Monte Carlo method to estimate the value of pi.&lt;/p&gt;
&lt;h3 id=&#34;solution&#34; &gt;Solution
&lt;span&gt;
    &lt;a href=&#34;#solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;We estimate the area by sampling bivariate uniforms and looking at the fraction that fall into the unit circle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Julia&#34; data-lang=&#34;Julia&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Number of iterations&lt;/span&gt;
n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#counter variable&lt;/span&gt;
count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n &lt;span style=&#34;color:#75715e&#34;&gt;# for i in the range of 1 to n&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; count  &lt;span style=&#34;color:#75715e&#34;&gt;# make count global to reference within the loop.  Otherwise the the variable will be understood to be a local within the for loop&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#rand(2) Returns a two element vector.  &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#Can be read as let u be equal to the first index of the vector and let v be equal to the second&lt;/span&gt;
    u, v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    
    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqrt((u &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# distance from middle of square&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;
        count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

area_estimate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; n

print(area_estimate &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# dividing by radius**2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;use-quadgk-to-aproximate-an-integral&#34; &gt;Use QuadGk to Aproximate an integral
&lt;span&gt;
    &lt;a href=&#34;#use-quadgk-to-aproximate-an-integral&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The trapezoidal rule can be used to aproximate an integral.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Julia&#34; data-lang=&#34;Julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; QuadGK

f(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# The Function&lt;/span&gt;

value, accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quadgk(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# pass the function, the lower bound and the upper bound&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Configuring Rocky Linux 8 for Quantitative Analysis in Julia</title>
      <link>https://blog.jnapolitano.io/posts/rocky-linux-8-julia/</link>
      <pubDate>Tue, 24 May 2022 00:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/rocky-linux-8-julia/</guid>
      <description>&lt;h2 id=&#34;install-jupyter&#34; &gt;Install Jupyter
&lt;span&gt;
    &lt;a href=&#34;#install-jupyter&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Start with installing jupyter.  It will serve as our server for development.&lt;/p&gt;
&lt;h3 id=&#34;install-dependencies&#34; &gt;Install Dependencies
&lt;span&gt;
    &lt;a href=&#34;#install-dependencies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo dnf install gcc python3-devel kernel-headers-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;uname -r&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-jupyter-via-pip&#34; &gt;Install Jupyter Via Pip
&lt;span&gt;
    &lt;a href=&#34;#install-jupyter-via-pip&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip3 install --user jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-julia&#34; &gt;Install Julia
&lt;span&gt;
    &lt;a href=&#34;#install-julia&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;We will be installing from the official binaries.&lt;/p&gt;
&lt;p&gt;Make a directory in user profile.  i simply ran &lt;code&gt;mkdir julia&lt;/code&gt; in the &lt;code&gt;home&lt;/code&gt; folder.  The &lt;code&gt;cd&lt;/code&gt; to &lt;code&gt;julia&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When in the folder run&lt;/p&gt;
&lt;h3 id=&#34;wget&#34; &gt;Wget
&lt;span&gt;
    &lt;a href=&#34;#wget&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://julialang-s3.julialang.org/bin/linux/x64/1.7/julia-1.7.2-linux-x86_64.tar.gz

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;unpack&#34; &gt;Unpack
&lt;span&gt;
    &lt;a href=&#34;#unpack&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Then unpack&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tar zxvf julia-1.7.2-linux-x86_64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-to-path&#34; &gt;Add to Path
&lt;span&gt;
    &lt;a href=&#34;#add-to-path&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;In my case I added the following to my shell profile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;:/home/jnapolitano/julia/julia-1.7.2/bin/&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;downloading-the-quantecon-project&#34; &gt;Downloading the QuantEcon Project
&lt;span&gt;
    &lt;a href=&#34;#downloading-the-quantecon-project&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I will be working through the QuantEcon textbook provided at &lt;a href=&#34;https://julia.quantecon.org/&#34;&gt;https://julia.quantecon.org/&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;clone-the-repository&#34; &gt;Clone the repository
&lt;span&gt;
    &lt;a href=&#34;#clone-the-repository&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
git clone https://github.com/quantecon/lecture-julia.notebooks

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;activate-the-project&#34; &gt;Activate the Project.
&lt;span&gt;
    &lt;a href=&#34;#activate-the-project&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Run a julia repl by typing &lt;code&gt;julia&lt;/code&gt; into your terminal&amp;hellip; if you added it to the path.  Otherwise navigate to the bin and activate julia.&lt;/p&gt;
&lt;h3 id=&#34;install-the-dependencies&#34; &gt;Install the Dependencies
&lt;span&gt;
    &lt;a href=&#34;#install-the-dependencies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Next run the following commands from the Julia REPL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Pkg

Pkg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;activate(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)

Pkg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate()

&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;IT will take some time to download and extract all of the packages give it time.  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI Part 8: Case Nodes Sample Data</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-8/</link>
      <pubDate>Mon, 23 May 2022 16:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-8/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The legal Research with AI Series is expanding quickly. This is the 9th post related to it in someway.  Building this pipeline and integrating multiple datasets into nodes is proving to be verbose.&lt;/p&gt;
&lt;p&gt;This post documents merging Oyez and Library of Congress of data structured json files that represent nodes and hierarchal relationships.&lt;/p&gt;
&lt;h2 id=&#34;main-function&#34; &gt;Main Function
&lt;span&gt;
    &lt;a href=&#34;#main-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The plan for this program is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the prepared dataframe created in the &lt;a href=&#34;https://blog.jnapolitano.io/posts/legal-research-part-7/&#34;&gt;legal research part 7 post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;for each row of the df load a dictionary from the the libary of congress path and the oyez path&lt;/li&gt;
&lt;li&gt;Set keys on the Oyez dataset&lt;/li&gt;
&lt;li&gt;Write the updated Oyez dataset to file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Review the work below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():

    &lt;span style=&#34;color:#75715e&#34;&gt;# outpath fo the current file&lt;/span&gt;
    inpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;case_files.csv&amp;#34;&lt;/span&gt;])
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodes&amp;#34;&lt;/span&gt;])
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Create a df from the case_files.csv file&lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(inpath)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index, row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; master_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
            
        oyez_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_json(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Path&amp;#34;&lt;/span&gt;])
        loc_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_json(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Path_1&amp;#39;&lt;/span&gt;])
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_id&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_url&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple_citation&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issues&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_list(loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issue&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major_topics&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_list(loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_major_case_topic&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major_topic&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
            oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major_topics&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_pdf&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]

        outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([outpath,oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple_citation&amp;#39;&lt;/span&gt;]])
        outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outfile &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(outfile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f: 
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(outpath,f)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;helper-functions&#34; &gt;Helper Functions
&lt;span&gt;
    &lt;a href=&#34;#helper-functions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;read-json&#34; &gt;Read Json
&lt;span&gt;
    &lt;a href=&#34;#read-json&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;read_json simply reads json into a dictionary with the json.loads method with a context manager.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_json&lt;/span&gt;(file_path):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(file_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f: 
        dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(f)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dict

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;nodify-list&#34; &gt;Nodify List
&lt;span&gt;
    &lt;a href=&#34;#nodify-list&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Some of the data in the Loc dataset is stored in lists.  I want them to be individual nodes in the final dataset.  To account for this, the nodify_list function returns a list of dictionaries containing keys that will be used to construct graph nodes.   I will most likely need to modify these as the graph schema expands with more data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_list&lt;/span&gt;(lst,node_name):
    return_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst: 
        dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {node_name: item}
        return_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(dict)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; return_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-complete-program&#34; &gt;The Complete Program
&lt;span&gt;
    &lt;a href=&#34;#the-complete-program&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#merging.python&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; doctest &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; master
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_json&lt;/span&gt;(file_path):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(file_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f: 
        dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(f)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dict

    
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_list&lt;/span&gt;(lst,node_name):
    return_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst: 
        dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {node_name: item}
        return_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(dict)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; return_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():

    &lt;span style=&#34;color:#75715e&#34;&gt;# outpath fo the current file&lt;/span&gt;
    inpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;case_files.csv&amp;#34;&lt;/span&gt;])
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodes&amp;#34;&lt;/span&gt;])
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Create a df from the case_files.csv file&lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(inpath)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index, row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; master_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
            
        oyez_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_json(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Path&amp;#34;&lt;/span&gt;])
        loc_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_json(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Path_1&amp;#39;&lt;/span&gt;])
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_id&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_url&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple_citation&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issues&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_list(loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issue&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major_topics&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_list(loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_major_case_topic&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major_topic&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
            oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major_topics&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]
        oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_pdf&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]

        outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([outpath,oyez_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple_citation&amp;#39;&lt;/span&gt;]])
        outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outfile &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(outfile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f: 
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(oyez_dict,f, indent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
        


    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(oyez_dict)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-json-output&#34; &gt;Sample Json Output
&lt;span&gt;
    &lt;a href=&#34;#sample-json-output&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Below is a sample of what the program outputs.  It is a single case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;decisions&amp;#34;&lt;/span&gt;: [
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/case_decision/case_decision/16396&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;votes&amp;#34;&lt;/span&gt;: [
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ideology&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;seniority&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majority&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/john_marshall&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15085&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;53035&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32729&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                    },
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12570&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john_marshall&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                          {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2729&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chief Justice of the United States&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4244119200&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2729&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5330167200&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                          }
                                    ],
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Marshall&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/decision_vote/decision_vote/205605&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majority&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;joining&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ideology&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;seniority&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/bushrod_washington&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15093&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Washington&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;42759&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/bushrod_washington/bushrod_washington.thumb.png&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32698&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                    },
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11339&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bushrod_washington&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                          {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2737&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4421066400&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2737&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5400756000&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                          }
                                    ],
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bushrod Washington&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/decision_vote/decision_vote/205606&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majority&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;joining&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15085&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;53035&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32729&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                          },
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12570&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                                {
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2729&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chief Justice of the United States&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4244119200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2729&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5330167200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                                }
                                          ],
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Marshall&amp;#34;&lt;/span&gt;
                                    }
                              ]
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ideology&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;seniority&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;concurrence&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/william_johnson&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15059&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Johnson&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;45940&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/william_johnson/william_johnson.thumb.png&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32779&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                    },
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11046&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;william_johnson&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                          {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2703&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4273149600&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2703&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5227524000&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                          }
                                    ],
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Johnson&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/decision_vote/decision_vote/205607&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majority&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;joining&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15085&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;53035&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32729&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                          },
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12570&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                                {
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2729&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chief Justice of the United States&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4244119200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2729&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5330167200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                                }
                                          ],
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Marshall&amp;#34;&lt;/span&gt;
                                    }
                              ]
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ideology&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;seniority&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/brockholst_livingston&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15111&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Livingston&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;44786&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/brockholst_livingston/brockholst_livingston.thumb.png&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32714&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                    },
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5901&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brockholst_livingston&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                          {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2755&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4632314400&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2755&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5142160800&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                          }
                                    ],
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Henry Brockholst Livingston&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/decision_vote/decision_vote/205608&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majority&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;joining&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15085&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;53035&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32729&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                          },
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12570&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                                {
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2729&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chief Justice of the United States&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4244119200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2729&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5330167200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                                }
                                          ],
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Marshall&amp;#34;&lt;/span&gt;
                                    }
                              ]
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ideology&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;seniority&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/thomas_todd&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15039&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Todd&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;41113&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/thomas_todd/thomas_todd.thumb.png&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32769&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                    },
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6854&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thomas_todd&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                          {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2683&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4540989600&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2683&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5133175200&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                          }
                                    ],
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Todd&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/decision_vote/decision_vote/205609&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majority&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;joining&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15085&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;53035&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32729&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                          },
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12570&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john_marshall&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                                {
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2729&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chief Justice of the United States&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4244119200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2729&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5330167200&lt;/span&gt;,
                                                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                                }
                                          ],
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Marshall&amp;#34;&lt;/span&gt;
                                    }
                              ]
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ideology&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;seniority&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/william_cushing&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15077&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cushing&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52796&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/william_cushing/william_cushing.thumb.png&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32776&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                    },
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7527&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;william_cushing&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                          {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;George Washington&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2721&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5027076000&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2721&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5677408800&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                          }
                                    ],
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Cushing&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/decision_vote/decision_vote/205610&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;joining&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ideology&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;seniority&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/samuel_chase&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15105&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chase&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52231&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/samuel_chase/samuel_chase.thumb.png&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32759&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                                    },
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5613&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;samuel_chase&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                          {
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;George Washington&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2749&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5002970400&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2749&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5487933600&lt;/span&gt;,
                                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                          }
                                    ],
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Samuel Chase&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/decision_vote/decision_vote/205611&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;joining&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
                        }
                  ],
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minority_vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;winning_party&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Peck&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;decision_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majority opinion&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;majority_vote&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Under the  Contracts Clause (Article 1, Section 10, Clause 1), states cannot rescind an agreement even if that agreement was reached illegally&amp;#34;&lt;/span&gt;
            }
      ],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/cases/1789-1850/10us87&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;second_party&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Peck&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;first_party&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Robert Fletcher&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;advocates&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A case in which the Court held that a contract is still binding and enforceable, even if secured illegally.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;first_party_label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Petitioner&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;related_cases&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;conclusion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;In a unanimous opinion, the Court held that since the estate had been legally \&amp;#34;passed into the hands of a purchaser for a valuable consideration,\&amp;#34; the Georgia legislature could not take away the land or invalidate the contract. Noting that the Constitution did not permit bills of attainder or ex post facto laws, the Court held that laws annulling contracts or grants made by previous legislative acts were constitutionally impermissible.&amp;lt;/p&amp;gt;\n&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;facts_of_the_case&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;In 1795, the Georgia state legislature passed a land grant awarding territory to four companies. The following year, however, the legislature voided the law and declared all rights and claims under it to be invalid. In 1800, John Peck acquired land that was part of the original legislative grant. He then sold the land to Robert Fletcher three years later, claiming that past sales of the land had been legitimate. Fletcher argued that since the original sale of the land had been declared invalid, Peck had no legal right to sell the land and thus committed a breach of contract.&amp;lt;/p&amp;gt;\n&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timeline&amp;#34;&lt;/span&gt;: [
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/case_timeline/case_timeline/52829&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dates&amp;#34;&lt;/span&gt;: [
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;-5045220000&lt;/span&gt;,
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;-5075546400&lt;/span&gt;,
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;-5075460000&lt;/span&gt;,
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;-5075373600&lt;/span&gt;,
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;-5075287200&lt;/span&gt;
                  ],
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;event&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Argued&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/case_timeline/case_timeline/52830&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dates&amp;#34;&lt;/span&gt;: [
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;-5042714400&lt;/span&gt;
                  ],
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;event&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Decided&amp;#34;&lt;/span&gt;
            }
      ],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;opinion_announcement&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;second_party_label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Respondent&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;heard_by&amp;#34;&lt;/span&gt;: [
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/courts/marshall6&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15247&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;members&amp;#34;&lt;/span&gt;: [
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/john_marshall&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15085&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;53035&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32729&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12570&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john_marshall&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2729&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chief Justice of the United States&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4244119200&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2729&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5330167200&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                    }
                              ],
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Marshall&amp;#34;&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/william_cushing&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15077&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cushing&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52796&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/william_cushing/william_cushing.thumb.png&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32776&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7527&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;william_cushing&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;George Washington&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2721&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5027076000&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2721&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5677408800&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                    }
                              ],
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Cushing&amp;#34;&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/samuel_chase&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15105&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chase&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52231&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/samuel_chase/samuel_chase.thumb.png&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32759&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5613&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;samuel_chase&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;George Washington&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2749&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5002970400&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2749&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5487933600&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                    }
                              ],
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Samuel Chase&amp;#34;&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/bushrod_washington&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15093&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Washington&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;42759&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/bushrod_washington/bushrod_washington.thumb.png&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32698&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11339&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bushrod_washington&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2737&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4421066400&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2737&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5400756000&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                    }
                              ],
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bushrod Washington&amp;#34;&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/william_johnson&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15059&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Johnson&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;45940&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/william_johnson/william_johnson.thumb.png&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32779&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11046&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;william_johnson&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2703&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4273149600&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2703&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5227524000&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                    }
                              ],
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Johnson&amp;#34;&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/brockholst_livingston&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15111&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Livingston&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;44786&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/brockholst_livingston/brockholst_livingston.thumb.png&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32714&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5901&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brockholst_livingston&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2755&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4632314400&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2755&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5142160800&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                    }
                              ],
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Henry Brockholst Livingston&amp;#34;&lt;/span&gt;
                        },
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/thomas_todd&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15039&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Todd&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;41113&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/thomas_todd/thomas_todd.thumb.png&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32769&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                              },
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6854&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thomas_todd&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                                    {
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2683&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4540989600&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2683&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5133175200&lt;/span&gt;,
                                          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                                    }
                              ],
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Todd&amp;#34;&lt;/span&gt;
                        }
                  ],
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;court_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5133175200&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;marshall6&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;images&amp;#34;&lt;/span&gt;: [
                        {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4355969&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/courts/marshall6.jpg&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;78522&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/jpeg&amp;#34;&lt;/span&gt;
                        }
                  ],
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall Court (1807-1810)&amp;#34;&lt;/span&gt;
            }
      ],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;manner_of_jurisdiction&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Writ of &amp;lt;i&amp;gt;certiorari&amp;lt;/i&amp;gt;&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1793&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lower_court&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;justia_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://supreme.justia.com/cases/federal/us/10/87/&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;docket_number&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;62333&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;written_opinion&amp;#34;&lt;/span&gt;: [
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;judge_full_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Syllabus&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;16171&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/case_document/written_opinion/16171&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;justia_opinion_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://supreme.justia.com/cases/federal/us/10/87/&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;judge_last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;justia_opinion_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1907670&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;syllabus&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Syllabus&amp;#34;&lt;/span&gt;
                  }
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;judge_full_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;View Case&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;16172&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/case_document/written_opinion/16172&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;justia_opinion_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://supreme.justia.com/cases/federal/us/10/87/case.html&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;judge_last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;justia_opinion_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1907671&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;case&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
                  }
            }
      ],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;question&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;Could the contract between Fletcher and Peck be invalidated by an act of the Georgia legislature?&amp;lt;/p&amp;gt;\n&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;citation&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;87&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;volume&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1810&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/case_citation/case_citation/27135&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;oral_argument_audio&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;decided_by&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/courts/marshall6&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15247&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;members&amp;#34;&lt;/span&gt;: [
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/john_marshall&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15085&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;53035&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32729&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                        },
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12570&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john_marshall&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                              {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2729&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chief Justice of the United States&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4244119200&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2729&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5330167200&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                              }
                        ],
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Marshall&amp;#34;&lt;/span&gt;
                  },
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/william_cushing&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15077&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cushing&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52796&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/william_cushing/william_cushing.thumb.png&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32776&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                        },
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7527&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;william_cushing&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                              {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;George Washington&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2721&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5027076000&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2721&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5677408800&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                              }
                        ],
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Cushing&amp;#34;&lt;/span&gt;
                  },
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/samuel_chase&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15105&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chase&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52231&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/samuel_chase/samuel_chase.thumb.png&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32759&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                        },
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5613&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;samuel_chase&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                              {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;George Washington&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2749&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5002970400&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2749&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5487933600&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                              }
                        ],
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Samuel Chase&amp;#34;&lt;/span&gt;
                  },
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/bushrod_washington&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15093&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Washington&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;42759&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/bushrod_washington/bushrod_washington.thumb.png&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32698&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                        },
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11339&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bushrod_washington&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                              {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Adams&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2737&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4421066400&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2737&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5400756000&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                              }
                        ],
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bushrod Washington&amp;#34;&lt;/span&gt;
                  },
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/william_johnson&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15059&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Johnson&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;45940&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/william_johnson/william_johnson.thumb.png&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32779&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                        },
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11046&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;william_johnson&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                              {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2703&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4273149600&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2703&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5227524000&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                              }
                        ],
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Johnson&amp;#34;&lt;/span&gt;
                  },
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/brockholst_livingston&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15111&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Livingston&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;44786&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/brockholst_livingston/brockholst_livingston.thumb.png&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32714&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                        },
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5901&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brockholst_livingston&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                              {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2755&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4632314400&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2755&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5142160800&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                              }
                        ],
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Henry Brockholst Livingston&amp;#34;&lt;/span&gt;
                  },
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/people/thomas_todd&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;15039&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Todd&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnail&amp;#34;&lt;/span&gt;: {
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;41113&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/people/thomas_todd/thomas_todd.thumb.png&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;32769&lt;/span&gt;,
                              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
                        },
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length_of_service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6854&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thomas_todd&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;: [
                              {
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appointing_president&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Jefferson&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/preson_role/scotus_justice/2683&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;role_title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Associate Justice of the Supreme Court of the United States&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scotus_justice&amp;#34;&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_end&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-4540989600&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2683&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5133175200&lt;/span&gt;,
                                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;institution_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Supreme Court of the United States&amp;#34;&lt;/span&gt;
                              }
                        ],
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thomas Todd&amp;#34;&lt;/span&gt;
                  }
            ],
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;court_start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-5133175200&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;view_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;identifier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;marshall6&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;images&amp;#34;&lt;/span&gt;: [
                  {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4355969&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.oyez.org/sites/default/files/images/courts/marshall6.jpg&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;78522&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image/jpeg&amp;#34;&lt;/span&gt;
                  }
            ],
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marshall Court (1807-1810)&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fletcher v. Peck&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1789-1850&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;additional_docket_numbers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loc_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.loc.gov/item/usrep010087/&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loc_url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.loc.gov/item/usrep010087/&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;simple_citation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;usrep010087&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shelf_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;series: Volume 10 Call Number: KF101 Series: Contracts Law&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;U.S. Reports: Fletcher v. Peck, 10 U.S. (6 Cranch) 87 (1810).&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issues&amp;#34;&lt;/span&gt;: [
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;supreme court&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united states&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;court opinions&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;periodical&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;land titles&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;contracts law&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;court cases&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;judicial decisions&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;equity&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;law library&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;public lands&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;judicial review and appeals&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;contracts&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;government documents&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bills and resolutions&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;law&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;common law&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;property rights&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;court decisions&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u.s. reports&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;legislative powers&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;real estate&amp;#34;&lt;/span&gt;
            },
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;issue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;property&amp;#34;&lt;/span&gt;
            }
      ],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;major_topics&amp;#34;&lt;/span&gt;: [
            {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;major_topic&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;contracts law&amp;#34;&lt;/span&gt;
            }
      ],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loc_pdf&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://tile.loc.gov/storage-services/service/ll/usrep/usrep010/usrep010087/usrep010087.pdf&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Legal Research with AI Part 7: Wrangling Data with Julia</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-7/</link>
      <pubDate>Sun, 22 May 2022 16:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-7/</guid>
      <description>&lt;h2 id=&#34;intro&#34; &gt;Intro
&lt;span&gt;
    &lt;a href=&#34;#intro&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In a &lt;a href=&#34;https://blog.jnapolitano.io/posts/legal-research-part-5/&#34;&gt;previous post&lt;/a&gt;, I seperated all of the results returned from the Library of Congress API into individual JSON documents to be imported as nodes into a neo4j graph.&lt;/p&gt;
&lt;p&gt;In this post, I filter the &lt;code&gt;LOC&lt;/code&gt; data against another data set from Oyez that will be integrated in the next post.&lt;/p&gt;
&lt;h2 id=&#34;filtering-data&#34; &gt;Filtering Data
&lt;span&gt;
    &lt;a href=&#34;#filtering-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Both data sets have been seperated into individual case nodes stored in the json format as a file with the format : &lt;citation&gt;.json.&lt;/p&gt;
&lt;p&gt;The Library of Congress data contains indices, admonitions, briefs, and other data that I will not yet be incorporating into my data set.&lt;/p&gt;
&lt;p&gt;In order to find only the case data I will be creating a dataframe containing the paths of json files with matching citations.&lt;/p&gt;
&lt;h2 id=&#34;using-julia-instead-of-python&#34; &gt;Using Julia Instead of Python
&lt;span&gt;
    &lt;a href=&#34;#using-julia-instead-of-python&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I love Python, but I want to try something new.  Julia&amp;rsquo;s &lt;a href=&#34;https://docs.julialang.org/en/v1/manual/methods/&#34;&gt;multiple dispatch&lt;/a&gt; design tempted me to try it out.  This is my first Julia program.  I will be documenting the work more so than usual.&lt;/p&gt;
&lt;h3 id=&#34;julia-import-functions&#34; &gt;Julia &amp;ldquo;import&amp;rdquo; Functions
&lt;span&gt;
    &lt;a href=&#34;#julia-import-functions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Coming from Python, I typically import libraries/packages with an &lt;code&gt;import&lt;/code&gt; call.  Something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Julia, we use the &lt;code&gt;using&lt;/code&gt; call to import the package. Like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; DataFrames
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; CSV

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A package can also be imported, but this does not instantiate the methods and functions within it (As far as I understand it).&lt;/p&gt;
&lt;p&gt;For instance &lt;code&gt;import CSV&lt;/code&gt; would only load the package but I would have to call CSV.method to actually do something.  Something like &lt;code&gt;from pandas import to_csv&lt;/code&gt; in Python.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; DataFrames
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; CSV

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-main-function&#34; &gt;The Main Function
&lt;span&gt;
    &lt;a href=&#34;#the-main-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Just like in C -and like we should in Python-, I declared a main function to run the program.  I call it with main().  I do not know if there is a similar convention to Python&amp;rsquo;s &lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;&lt;/code&gt;.  I will find out soon.&lt;/p&gt;
&lt;p&gt;The main difference in function declaration between Python and Julia is the inclusion of the &lt;code&gt;end&lt;/code&gt; keyword and the end of the function.&lt;/p&gt;
&lt;p&gt;For instance review the main function below :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main()
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# outpath fo the current file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;case_files.csv&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    oyez_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oyez_cited&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    loc_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loc_cited&amp;#34;&lt;/span&gt;)

    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Join on File excluding extraneous data not in the oyez dataset&lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; innerjoin(oyez_dataframe, loc_dataframe, on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:File&lt;/span&gt;, validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(true, true), makeunique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Select every file but the .DS_Store from the dataframe.  &lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(row &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;File &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DS_Store&amp;#34;&lt;/span&gt;), master_df)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Write to file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_file(master_df,outpath)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

main()


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;creating-an-outpath&#34; &gt;Creating an outpath
&lt;span&gt;
    &lt;a href=&#34;#creating-an-outpath&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The main function creates an outpath to write the resultant master df to file by calling &lt;code&gt;joinpath(pwd(), &amp;quot;case_files.csv&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-get-files-function&#34; &gt;The Get Files Function
&lt;span&gt;
    &lt;a href=&#34;#the-get-files-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Next, the get_files function is called to create two data frames:  the loc_df and the oyez_df.&lt;/p&gt;
&lt;h4 id=&#34;declaring-empty-string-arrays&#34; &gt;Declaring empty string arrays
&lt;span&gt;
    &lt;a href=&#34;#declaring-empty-string-arrays&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Each file name is appended to a file_name array declared with &lt;code&gt;&amp;lt;array_name&amp;gt; = String[]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;reading-files-with-readdir&#34; &gt;Reading Files with readdir()
&lt;span&gt;
    &lt;a href=&#34;#reading-files-with-readdir&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;File names are from from a directory passed to the built in &lt;code&gt;readdir()&lt;/code&gt; function.&lt;/p&gt;
&lt;h4 id=&#34;appending-files-to-file_name-array&#34; &gt;Appending Files to file_name Array
&lt;span&gt;
    &lt;a href=&#34;#appending-files-to-file_name-array&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Each file name is appended to a file_name array declared with &lt;code&gt;file_name = String[]&lt;/code&gt; and appended to with the push!(file_name,f) call.  Note the &lt;code&gt;!&lt;/code&gt; following push.  This typically means that the function is operating on the data in memory and will not return a new value.&lt;/p&gt;
&lt;h4 id=&#34;appending-file-paths-to-file_path-array&#34; &gt;Appending File Paths to file_path Array
&lt;span&gt;
    &lt;a href=&#34;#appending-file-paths-to-file_path-array&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;I also include the file path by appending what is returned by &lt;code&gt;path = joinpath(working_path, f)&lt;/code&gt; to the file_path list.&lt;/p&gt;
&lt;p&gt;I love the built in &lt;code&gt;joinpath&lt;/code&gt; function.  Pythons &lt;code&gt;os.sep.join()&lt;/code&gt; works well, but I really like Julia&amp;rsquo;s implementation.&lt;/p&gt;
&lt;h4 id=&#34;sorting-the-arrays-with-merge-sort&#34; &gt;Sorting the Arrays with Merge Sort
&lt;span&gt;
    &lt;a href=&#34;#sorting-the-arrays-with-merge-sort&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Arrays are soreted by call &lt;code&gt;sort_array(&amp;lt;array&amp;gt;)&lt;/code&gt;.  It returns a sorted array using the merge sort alogorithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; sort_array(array)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sort(array; alg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MergeSort)

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;crating-a-dataframe-with-the-arrays&#34; &gt;Crating a Dataframe with the Arrays
&lt;span&gt;
    &lt;a href=&#34;#crating-a-dataframe-with-the-arrays&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Finally a dataframe containing the sorted file_name and file_path lists as the columns file and path is created and then returned.&lt;/p&gt;
&lt;h4 id=&#34;a-note-on-refactoring&#34; &gt;A note on refactoring
&lt;span&gt;
    &lt;a href=&#34;#a-note-on-refactoring&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This function should be refactored into seperate ones, but it works well enough with this workflow that I am going to leave it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; get_files(directory)
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]

    working_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(), directory)
    &lt;span style=&#34;color:#75715e&#34;&gt;# context management.  Cd and then go back to the orignal pwd&lt;/span&gt;
    cd(working_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Current directory: &amp;#34;, working_path)&lt;/span&gt;
        foreach(readdir()) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; f
            path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(working_path, f)
            push!(file_name,f)
            push!(file_path, path)
            &lt;span style=&#34;color:#75715e&#34;&gt;#dump(stat(f.desc)) # you can customize what you want to print&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#println(&amp;#39;\n&amp;#39;, pwd())&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#display(file_paths)&lt;/span&gt;
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_name)
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_path)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataFrame(File &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name, Path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;joining-data-frames-by-citation&#34; &gt;Joining Data Frames by Citation
&lt;span&gt;
    &lt;a href=&#34;#joining-data-frames-by-citation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Julia&amp;rsquo;s DataFrames package can easily join dataframes on a column.  In this workflow the file which is titled after a case citation is used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Join on File excluding extraneous data not in the oyez dataset&lt;/span&gt;
master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; innerjoin(oyez_dataframe, loc_dataframe, on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:File&lt;/span&gt;, validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(true, true), makeunique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;filtering-the-df-for-extraneous-files&#34; &gt;Filtering the DF for Extraneous Files
&lt;span&gt;
    &lt;a href=&#34;#filtering-the-df-for-extraneous-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The master_df  is filtered to remove &lt;code&gt;.DS_Store&lt;/code&gt; from the list of files to be processed.  Below notice the &lt;code&gt;!&lt;/code&gt; in this case it will return all a data frame of values that are not equal to .DS_Store in the File column.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Select every file but the .DS_Store from the dataframe.  &lt;/span&gt;
master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(row &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;File &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DS_Store&amp;#34;&lt;/span&gt;), master_df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-df_to_file-function&#34; &gt;The df_to_file Function
&lt;span&gt;
    &lt;a href=&#34;#the-df_to_file-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Finally the df is written to file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Write to file&lt;/span&gt;
outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_file(master_df,outpath)


&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; df_to_file(df,outpath)
    CSV&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(outpath, df)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outpath

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-complete-program&#34; &gt;The Complete Program
&lt;span&gt;
    &lt;a href=&#34;#the-complete-program&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; DataFrames
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; CSV

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; get_files(directory)
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]

    working_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(), directory)
    &lt;span style=&#34;color:#75715e&#34;&gt;# context management.  Cd and then go back to the orignal pwd&lt;/span&gt;
    cd(working_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Current directory: &amp;#34;, working_path)&lt;/span&gt;
        foreach(readdir()) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; f
            path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(working_path, f)
            push!(file_name,f)
            push!(file_path, path)
            &lt;span style=&#34;color:#75715e&#34;&gt;#dump(stat(f.desc)) # you can customize what you want to print&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#println(&amp;#39;\n&amp;#39;, pwd())&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#display(file_paths)&lt;/span&gt;
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_name)
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_path)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataFrame(File &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name, Path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;



&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; sort_array(array)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sort(array; alg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MergeSort)

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;



&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; df_to_file(df,outpath)
    CSV&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(outpath, df)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outpath

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main()
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# outpath fo the current file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;case_files.csv&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    oyez_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oyez_cited&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    loc_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loc_cited&amp;#34;&lt;/span&gt;)

    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Join on File excluding extraneous data not in the oyez dataset&lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; innerjoin(oyez_dataframe, loc_dataframe, on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:File&lt;/span&gt;, validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(true, true), makeunique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Select every file but the .DS_Store from the dataframe.  &lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(row &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;File &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DS_Store&amp;#34;&lt;/span&gt;), master_df)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Write to file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_file(master_df,outpath)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

main()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 5</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-5/</link>
      <pubDate>Sat, 21 May 2022 14:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-5/</guid>
      <description>&lt;h1 id=&#34;legal-research-with-ai-part-5&#34; &gt;Legal Research with AI: Part 5&amp;quot;
&lt;span&gt;
    &lt;a href=&#34;#legal-research-with-ai-part-5&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;In the previous posts in this series, I have downloaded the data required to build the neo4j graph.  In this post, I will arrange the data into a data structure that will permit me to easily create graph nodes and most importantly relationships.&lt;/p&gt;
&lt;h2 id=&#34;the-runner-program&#34; &gt;The Runner Program
&lt;span&gt;
    &lt;a href=&#34;#the-runner-program&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The raw structure of the data is organized by the results of the api requests.  There are thus 80 cases per file.  I want them organized by individual cases to facilitate integration with another dataset that will be detailed in the next post.&lt;/p&gt;
&lt;h3 id=&#34;glob-the-input-older&#34; &gt;Glob the input older
&lt;span&gt;
    &lt;a href=&#34;#glob-the-input-older&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The program below simply reads thedownloaded json data from a folder to create a list of file paths to read.&lt;/p&gt;
&lt;h3 id=&#34;modify-the-case-data&#34; &gt;Modify The Case Data
&lt;span&gt;
    &lt;a href=&#34;#modify-the-case-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;It then traverses that list to find the individual case data to write to file.&lt;/p&gt;
&lt;h3 id=&#34;add--loc_id-to-the-dictionary&#34; &gt;Add  &lt;code&gt;loc_id&lt;/code&gt; to the Dictionary
&lt;span&gt;
    &lt;a href=&#34;#add--loc_id-to-the-dictionary&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;For each case it create the &lt;code&gt;loc_id&lt;/code&gt; key that will be used to join with another dataset.&lt;/p&gt;
&lt;h3 id=&#34;write-to-file&#34; &gt;Write to File
&lt;span&gt;
    &lt;a href=&#34;#write-to-file&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Finally, it writes the new case dictionary to file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#75715e&#34;&gt;#from neoModelAPI import NeoNodes as nn&lt;/span&gt;




    

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cwd&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_cases&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.json&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_json_data&lt;/span&gt;(file):
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open (file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)
  
    &lt;span style=&#34;color:#75715e&#34;&gt;# Reading from file&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;citation_output&lt;/span&gt;(file_list,cwd):
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_cited&amp;#39;&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
        
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_json_data(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#data = create_citation(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            split &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
            result[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loc_id&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
            outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.json&amp;#39;&lt;/span&gt;
            outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([outpath,outfile])
            
            pprint(outfile)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(outfile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
                json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(result, f)



&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;#neo_applified = instantiate_neo_model_api()&lt;/span&gt;
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd)
    output_files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; citation_output(file_list,cwd)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 4</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-4/</link>
      <pubDate>Thu, 19 May 2022 22:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-4/</guid>
      <description>&lt;h1 id=&#34;conduct-legal-research-with-ai-part-4&#34; &gt;Conduct Legal Research with AI Part 4
&lt;span&gt;
    &lt;a href=&#34;#conduct-legal-research-with-ai-part-4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;This is the fourth post in a series documenting the process of building an ml pipeline used to train models to predict the outcomes of Supreme Court cases.&lt;/p&gt;
&lt;p&gt;You can find the others at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href=&#34;https://blog.jnapolitano.io/neo4j_integration/&#34;&gt;blog.jnapolitano.io/neo4j_integration/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href=&#34;https://blog.jnapolitano.io/constitution_to_neo/&#34;&gt;blog.jnapolitano.io/constitution_to_neo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href=&#34;https://blog.jnapolitano.io/ai-proof-of-concept/&#34;&gt;blog.jnapolitano.io/ai-proof-of-concept/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modeling-the-supreme-court&#34; &gt;Modeling the Supreme Court
&lt;span&gt;
    &lt;a href=&#34;#modeling-the-supreme-court&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Thankfully, much of the ground work has been done by contributors to &lt;a href=&#34;http://scdb.wustl.edu/documentation.php&#34;&gt;The Washington University of St. Louis Law School Supreme Court Database&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, The Supreme Court Database is limited in its scope. My approach extends their work by  creating a graph database.&lt;/p&gt;
&lt;p&gt;I have chosen to model the data in a graph database with a Person, Object, Event, Location (POLE) schema.  This will permit me to relate cases, justices, subjects, objects, ideas, and events to one another to train ML models to automate much of the legal research pipeline.&lt;/p&gt;
&lt;p&gt;The models could be ported to work with any body of jurisprudence.&lt;/p&gt;
&lt;h2 id=&#34;the-case-class&#34; &gt;The Case Class
&lt;span&gt;
    &lt;a href=&#34;#the-case-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In this post, I publish only the Case schema that will be used to relate cases to other objects for a machine learning algorithm to predict the outcomes, subjects, and legal provisions of court cases.&lt;/p&gt;
&lt;p&gt;A detailed report documenting each variable will be produced in the future when I publish the database.  For the time being, the Case class below should suitably demonstrate the foundation of the database.&lt;/p&gt;
&lt;p&gt;I will continue to publish the remaining classes as they are completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    &lt;span style=&#34;color:#75715e&#34;&gt;#####Media########&lt;/span&gt;
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 

    &lt;span style=&#34;color:#75715e&#34;&gt;#### Identification Variables####&lt;/span&gt;
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    loc_title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()

    usCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    
    caseId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
   
    caseName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_docket_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_vote_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_issues_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    supCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    lawEdCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    lexisCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    dockNumb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;######background Variables########&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    petitioner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Petitioner&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PETITIONER&amp;#39;&lt;/span&gt;)
    petitionState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PETITIONER&amp;#39;&lt;/span&gt;)

    respondent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Respondent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_RESPONDENT&amp;#39;&lt;/span&gt;)
    respondentState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_RESPONDENT&amp;#39;&lt;/span&gt;)

    jurisdiction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jurisdiction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JURISDICTION&amp;#39;&lt;/span&gt;)
    
    adminAction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACTION&amp;#39;&lt;/span&gt;)

    threeJudgeFdc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()

    origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USCOURT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ORIGIN&amp;#39;&lt;/span&gt;)

    origin_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ORIGIN&amp;#39;&lt;/span&gt;)

    source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SOURCE&amp;#39;&lt;/span&gt;)

    source_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SOURCE&amp;#39;&lt;/span&gt;)

    lc_disagreement &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()

    certReason &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CertReason&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REASON&amp;#39;&lt;/span&gt;)

    lc_disposition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LC_DISPOSITION&amp;#39;&lt;/span&gt;)

    lc_direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LC_DIRECTION&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#####3 Chronological #####&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# From Spaethe&lt;/span&gt;
    dateArgument &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()
    dateDecision &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()
    dateReargue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()

    &lt;span style=&#34;color:#75715e&#34;&gt;# From LOC&lt;/span&gt;
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    term &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Term&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TERM_OF&amp;#39;&lt;/span&gt;)
    natCourt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Natcourt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NAT_COURT&amp;#39;&lt;/span&gt;)

    chief &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CHIEF&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;######Substantive#####&lt;/span&gt;

    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    decisionDirection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUP_COURT_MAJORITY_DIRECTION&amp;#39;&lt;/span&gt;)
    
    decisionDirectionDissent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUP_COURT_DISSENT_DIRECTION&amp;#39;&lt;/span&gt;)
    
    spaethIssue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SpaethIssue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SPAETH_ISSUE&amp;#39;&lt;/span&gt;)
    
    spaethIssueArea &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SpaethIssueArea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SPAETH_ISSUE_AREA&amp;#39;&lt;/span&gt;)

    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CASE_OF&amp;#34;&lt;/span&gt;)
    
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ARTICLE_OF&amp;#39;&lt;/span&gt;)
    
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CLAUSE_OF&amp;#39;&lt;/span&gt;)
    
    section &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Section&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SECTION_OF&amp;#39;&lt;/span&gt;)
    
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SUB_CLAUSE_OF&amp;#39;&lt;/span&gt;)
    
    major_case_topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_MAJOR_TOPIC&amp;#39;&lt;/span&gt;)

    authority &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authority&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_AUTHORITY&amp;#39;&lt;/span&gt;)

    legalProvision &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;legalProvision&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PROVISION&amp;#39;&lt;/span&gt;)
    
    lawType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lawType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lawType&amp;#39;&lt;/span&gt;)

    law &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Law&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUPPORTING_LAW&amp;#39;&lt;/span&gt;)

   
    &lt;span style=&#34;color:#75715e&#34;&gt;######Outcome Variables#####&lt;/span&gt;

    decisionType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DecisionType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_DECISION_TYPE&amp;#39;&lt;/span&gt;)

    declarationUnconstitutional &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Constitutional&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNCONSTITUTIONAL&amp;#39;&lt;/span&gt;)
    
    delcarationConstitutional &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Constitutional&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CONSTITUTIONAL&amp;#34;&lt;/span&gt;)

    disposition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_DISPOSITION&amp;#39;&lt;/span&gt;)

    winningParty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Party&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_WINNER&amp;#39;&lt;/span&gt;)
    FormalAlterationOfPrecedent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()
    
    alteredPrecedent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Altered_Precedent&amp;#39;&lt;/span&gt;)
    

    &lt;span style=&#34;color:#75715e&#34;&gt;## Voting and Opinion Variables&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# will account for all types of votes a node for each outcome&lt;/span&gt;
    vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Vote&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OUTCOME&amp;#39;&lt;/span&gt;)
    
    majOpinWriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WROTE_MAJORITY_OPINION&amp;#39;&lt;/span&gt;)
    
    majOpinWriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASSIGNED_MAJORITY_OPINION&amp;#34;&lt;/span&gt;)

    affirmative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFFIRMATE_VOTE&amp;#34;&lt;/span&gt;)
    
    negative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NEGATIVE_VOTE&amp;#34;&lt;/span&gt;)

    conservative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CONSERVATIVE&amp;#39;&lt;/span&gt;)
    liberal_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LIBERAL&amp;#34;&lt;/span&gt;)

    majority_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MAJORITY_VOTE&amp;#39;&lt;/span&gt;)

    miniority_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MINORITY_VOTE&amp;#39;&lt;/span&gt;)

    wrote_an_opinion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WROTE_AN_OPINION&amp;#39;&lt;/span&gt;)

    co_authored_opinion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COAUTHORED_OPINION&amp;#34;&lt;/span&gt;)

    agreed_with_concurrence &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AGREED_WITH_CONCURRENCE&amp;#39;&lt;/span&gt;)

    agreed_with_dissent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AGREED_WITH_CONCURRENCE&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 3</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-3/</link>
      <pubDate>Wed, 18 May 2022 14:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-3/</guid>
      <description>&lt;h1 id=&#34;conduct-legal-research-with-ai-part-3&#34; &gt;Conduct Legal Research with AI: Part 3
&lt;span&gt;
    &lt;a href=&#34;#conduct-legal-research-with-ai-part-3&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;This is the third post in a series documenting the process of building an ml pipeline that will be used to train models to predict the outcomes of Supreme Court Cases.&lt;/p&gt;
&lt;p&gt;You can find the others at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jnapolitano.io/neo4j_integration/&#34;&gt;blog.jnapolitano.io/neo4j_integration/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jnapolitano.io/constitution_to_neo/&#34;&gt;blog.jnapolitano.io/constitution_to_neo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In this post, I will be testing a sample TensorFlow pipeline against the &lt;a href=&#34;http://scdb.wustl.edu/&#34;&gt;Supreme Court Database&lt;/a&gt; maintained by the Washington University Law School in order to build a proof of concept model for a Supreme Court Graph Analysis project.&lt;/p&gt;
&lt;h2 id=&#34;the-data-set&#34; &gt;The Data Set
&lt;span&gt;
    &lt;a href=&#34;#the-data-set&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The data set is fairly limited. There are only about 250 issue areas to train against. It also does not include doctrinal trees to train an algorithm to predict when the court will break from precedent.&lt;/p&gt;
&lt;p&gt;The data records primarily the voting behavior of justices, the policy direction of the outcome, and the political ideology score of the outcome.&lt;/p&gt;
&lt;p&gt;Policy direction and political ideology are factors coded by individuals that may be prone to error an bias. In my analysis I will test against the findings of this model to determine which factors are most powerful.&lt;/p&gt;
&lt;h2 id=&#34;the-model&#34; &gt;The Model
&lt;span&gt;
    &lt;a href=&#34;#the-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I tested against case centric and justice centric data orientations.&lt;/p&gt;
&lt;h3 id=&#34;case-centric-model&#34; &gt;Case Centric Model
&lt;span&gt;
    &lt;a href=&#34;#case-centric-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The first is case centric.  The power of this model is fairly limited, as it attempts to discern the outcome of a case from the aggregate behavior of the current justices on the bench.  It essentially creates a score that is modified by each case outcome to determine if the court will vote conservatively or liberally towards a case of regarding a specific issue area.  It is important to note that the database limits each case to one overarching issue area.&lt;/p&gt;
&lt;h4 id=&#34;case-centric-training-features&#34; &gt;Case Centric Training Features
&lt;span&gt;
    &lt;a href=&#34;#case-centric-training-features&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;issue&lt;/li&gt;
&lt;li&gt;issueArea&lt;/li&gt;
&lt;li&gt;naturalCourt&lt;/li&gt;
&lt;li&gt;petitioner&lt;/li&gt;
&lt;li&gt;petitionerState&lt;/li&gt;
&lt;li&gt;respondent&lt;/li&gt;
&lt;li&gt;jurisdiction&lt;/li&gt;
&lt;li&gt;adminAction&lt;/li&gt;
&lt;li&gt;adminActionState&lt;/li&gt;
&lt;li&gt;threeJudgeFdc&lt;/li&gt;
&lt;li&gt;caseOrigin&lt;/li&gt;
&lt;li&gt;caseOriginState&lt;/li&gt;
&lt;li&gt;respondentState&lt;/li&gt;
&lt;li&gt;caseSource&lt;/li&gt;
&lt;li&gt;caseSourceState&lt;/li&gt;
&lt;li&gt;lawType&lt;/li&gt;
&lt;li&gt;lawSupp&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;case-centric-results&#34; &gt;Case Centric Results
&lt;span&gt;
    &lt;a href=&#34;#case-centric-results&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The models were able to predict the outcomes about 75 percent of the time following 1,000 epochs of training.  It is likely that factors other than previous voting behavior determine the outcome of the case.&lt;/p&gt;
&lt;h3 id=&#34;justice-centric-model&#34; &gt;Justice Centric Model
&lt;span&gt;
    &lt;a href=&#34;#justice-centric-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The second is justice centric.  The predictive power of this model, should in theory be greater as it attempts to determine the likely vote of an individual justice against an issue area.  Again this is limited as only the overarching issue area is available in the data.  It may very well prove that justices may favor free speech in most cases, except when the military is the target.  The model could not predict that, because the data is limited.&lt;/p&gt;
&lt;h4 id=&#34;justice-centric-training-features&#34; &gt;Justice Centric Training Features
&lt;span&gt;
    &lt;a href=&#34;#justice-centric-training-features&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;justice&lt;/li&gt;
&lt;li&gt;issue&lt;/li&gt;
&lt;li&gt;issueArea&lt;/li&gt;
&lt;li&gt;lawType&lt;/li&gt;
&lt;li&gt;direction&lt;/li&gt;
&lt;li&gt;petitioner&lt;/li&gt;
&lt;li&gt;naturalCourt&lt;/li&gt;
&lt;li&gt;petitionerState&lt;/li&gt;
&lt;li&gt;respondent&lt;/li&gt;
&lt;li&gt;respondentState&lt;/li&gt;
&lt;li&gt;jurisdiction&lt;/li&gt;
&lt;li&gt;caseOrigin&lt;/li&gt;
&lt;li&gt;caseOriginState&lt;/li&gt;
&lt;li&gt;caseSource&lt;/li&gt;
&lt;li&gt;caseSourceState&lt;/li&gt;
&lt;li&gt;certReason&lt;/li&gt;
&lt;li&gt;lawSupp&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;justice-centric-results&#34; &gt;Justice Centric Results
&lt;span&gt;
    &lt;a href=&#34;#justice-centric-results&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The justice centric pipeline results in accuracy exceeding 82 percent.  This is better, but a model that could consider more factors and issue areas would likely improve the results.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34; &gt;Next Steps
&lt;span&gt;
    &lt;a href=&#34;#next-steps&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I will integrate the models to my neo4j data set.  As of now, the graph database exceeds 50,000 individuals nodes and over 400,000 relationships.  It will allow me to train an algorithm that can determine a justices attitude towards, cases, clauses, sentences, states, petitioners, and any other feature integrated into the dataset.&lt;/p&gt;
&lt;h2 id=&#34;the-code&#34; &gt;The Code
&lt;span&gt;
    &lt;a href=&#34;#the-code&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;case-centric-training-pipeline&#34; &gt;Case Centric Training Pipeline
&lt;span&gt;
    &lt;a href=&#34;#case-centric-training-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;ve included the entire model below.  Review my &lt;a href=&#34;https://docs.jnapolitano.io/parts/ml-ai/tensorflow/project-supcourt-tensorflow/docs/SupremeCourtPredictionsCase/index.html&#34;&gt;documentation site&lt;/a&gt; for more detail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#supremeCourtPrediction.py&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#a program that uses the segal and spaeth dataset to predict the outcomes of cases&lt;/span&gt;


&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tensorflow &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; tf

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shap
shap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;initjs()

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os 
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; csv
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; feature_column
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow.keras &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; layers
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; train_test_split

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; itertools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; permutations 

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_environmental_variables&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    log_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logs/fit/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y%m&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-%H%M%S&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd, log_dir



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_data&lt;/span&gt;(cwd):
    data_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;citation.csv&amp;#39;&lt;/span&gt;) 
    drop_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drop.txt&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(path)&lt;/span&gt;
    dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(data_path,encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unicode_escape&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(dataframe.head())&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(drop_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; fp:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cnt, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(fp):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Dropping {} from dataframe&amp;#34;.format(line))&lt;/span&gt;
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;)

            dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(line,axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    print(dataframe)
    &lt;span style=&#34;color:#75715e&#34;&gt;#dataframe.issue = dataframe.astype({&amp;#39;issue&amp;#39;: &amp;#39;str&amp;#39;})&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#dataframe[issue] = dataframe[issue].astype(str)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(dataframe)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(dataframe.head())&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dataframe



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split_datframe&lt;/span&gt;(dataframe):
    train, test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(dataframe, test_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)
    train, val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(train, test_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)
    print(len(train), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;train examples&amp;#39;&lt;/span&gt;)
    print(len(val), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;validation examples&amp;#39;&lt;/span&gt;)
    print(len(test), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test examples&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; train, test, val


    &lt;span style=&#34;color:#75715e&#34;&gt;# A utility method to create a tf.data dataset from a Pandas Dataframe&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;df_to_dataset&lt;/span&gt;(dataframe, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
    dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;declarationUncon&amp;#39;&lt;/span&gt;)
    ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dataset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_tensor_slices((dict(dataframe), labels))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; shuffle:
        ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(buffer_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;len(dataframe))
    ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;batch(batch_size)
    print(ds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ds



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_input_pipeline&lt;/span&gt;(train, test, val, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    train_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(train, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size)
    val_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(val, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size)
    test_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(test, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; train_ds, val_ds, test_ds



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_feature_layer&lt;/span&gt;(cwd): &lt;span style=&#34;color:#75715e&#34;&gt;#select the columns for analysis from dataset&lt;/span&gt;
    feature_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features.txt&amp;#39;&lt;/span&gt;)
    dict_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use&amp;#39;&lt;/span&gt;)
    feature_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#embedded columns&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(feature_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; fp:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cnt, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(fp):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Adding {} to features&amp;#34;.format(line))&lt;/span&gt;
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;)

            print(cnt)   
            print(line)

            indicator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numeric_column(line)
            
            &lt;span style=&#34;color:#75715e&#34;&gt;#feature_column.categorical_column_with_vocabulary_file(&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#            key = line, vocabulary_file = os.path.join(dict_path,&amp;#34;{}.txt&amp;#34;.format(line)), default_value=0)&lt;/span&gt;

            print(indicator)
            feature_columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(indicator)


            &lt;span style=&#34;color:#75715e&#34;&gt;#feature_columns.append(feature_column.embedding_column(indicator, dimension=8))&lt;/span&gt;

    
    crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossed_column([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issueArea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;naturalCourt&amp;#39;&lt;/span&gt;], hash_bucket_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
    crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indicator_column(crossed_feature)
    feature_columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(crossed_feature)


    crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossed_column([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;naturalCourt&amp;#39;&lt;/span&gt;], hash_bucket_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
    crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indicator_column(crossed_feature)
    feature_columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(crossed_feature)

    crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossed_column([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;issueArea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;naturalCourt&amp;#39;&lt;/span&gt;],hash_bucket_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
    crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indicator_column(crossed_feature)
    feature_columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(crossed_feature)
    
   &lt;span style=&#34;color:#75715e&#34;&gt;# court_buckets = feature_column.bucketized_column(naturalCourt, boundaries=[18, 25, 30, 35, 40, 45, 50, 55, 60, 65])&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#print(feature_columns)&lt;/span&gt;
    feature_layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DenseFeatures(feature_columns)
    &lt;span style=&#34;color:#75715e&#34;&gt;#for item in feature_columns:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    print(item)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    print(&amp;#34;\n&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; feature_layer

     
    &lt;span style=&#34;color:#75715e&#34;&gt;#crossed cols&lt;/span&gt;


    &lt;span style=&#34;color:#75715e&#34;&gt;#categorical_columns &lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;understand_input_pipeline&lt;/span&gt;(train_ds):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; feature_batch, label_batch &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; train_ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Every feature:&amp;#39;&lt;/span&gt;, list(feature_batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys()))
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;A batch of ages:&amp;#39;, feature_batch[&amp;#39;age&amp;#39;])&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A batch of targets:&amp;#39;&lt;/span&gt;, label_batch )



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_model&lt;/span&gt;(log_dir,feature_layer, train_ds, val_ds, epochs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sequential([
        feature_layer,
        layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),
        layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),
        layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    ])

    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;,
            loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;losses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BinaryCrossentropy(from_logits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mae&amp;#39;&lt;/span&gt;])

    history &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(train_ds,
            validation_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;val_ds,
            epochs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;epochs)

    loss, accuracy,mae &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(test_ds)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accuracy&amp;#34;&lt;/span&gt;, accuracy)
    print(model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;summary())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; model,history


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot_history&lt;/span&gt;(history):

    hist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(history&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;history)
    print(hist)
    hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; history&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;epoch

    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure()
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Epoch&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mean Absolute Error&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;], hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mae&amp;#39;&lt;/span&gt;],
            label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train Error&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;], hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;val_mae&amp;#39;&lt;/span&gt;],
            label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Val Error&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend()



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;explain_kernal&lt;/span&gt;(df_train,model,train_ds):
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# KernelExplainer is a general approach that can work with any ML framework&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Its inputs are the predictions and training data&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Summarize the training set to accelerate analysis&lt;/span&gt;
    df_train_summary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kmeans(df_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Instantiate an explainer with the model predictions and training data summary&lt;/span&gt;
    explainer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;KernelExplainer(model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict, df_train)


&lt;span style=&#34;color:#75715e&#34;&gt;# Extract Shapley values from the explainer&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#shap_values = explainer.shap_values(df_train.values)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    cwd, log_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_environmental_variables()
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(cwd)&lt;/span&gt;

    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_data(cwd)

    train,test,val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split_datframe(df)
    dataset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(df)
    train_ds, val_ds, test_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_input_pipeline(train,test,val,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
    understand_input_pipeline(train_ds)
    feature_layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_feature_layer(cwd)
    model, model_history &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_model(log_dir,feature_layer, train_ds, val_ds)
    plot_history(model_history)
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(model.predict(train_ds))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(model.predict)&lt;/span&gt;
    explain_kernal(df,model,train_ds)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-justice-centric-training-pipeline&#34; &gt;The Justice Centric Training Pipeline
&lt;span&gt;
    &lt;a href=&#34;#the-justice-centric-training-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The entire pipeline is included below.  Review the &lt;a href=&#34;https://docs.jnapolitano.io/parts/ml-ai/tensorflow/project-supcourt-tensorflow/docs/SupremeCourtPredictionsJustice/index.html&#34;&gt;documentation&lt;/a&gt; for greater detail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#supremeCourtPrediction.py&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#a program that uses the segal and spaeth dataset to predict the outcomes of cases&lt;/span&gt;


&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tensorflow &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; tf

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shap
shap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;initjs()

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os 
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; csv
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; feature_column
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow.keras &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; layers
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; train_test_split

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; itertools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; permutations
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; itertools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; combinations_with_replacement

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_environmental_variables&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    log_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logs/fit/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y%m&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-%H%M%S&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd, log_dir




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_data&lt;/span&gt;(cwd):
    data_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;justice.csv&amp;#39;&lt;/span&gt;) 
    drop_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drop.txt&amp;#39;&lt;/span&gt;)
    target_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;targets.txt&amp;#39;&lt;/span&gt;)
    print(data_path)
    dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(data_path,encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unicode_escape&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(dataframe.head())&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(drop_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; fp:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cnt, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(fp):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Dropping {} from dataframe&amp;#34;.format(line))&lt;/span&gt;
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;)

            dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(line,axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    print(dataframe)
    &lt;span style=&#34;color:#75715e&#34;&gt;#dataframe.issue = dataframe.astype({&amp;#39;issue&amp;#39;: &amp;#39;str&amp;#39;})&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#dataframe[issue] = dataframe[issue].astype(str)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(dataframe)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(dataframe.head())&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dataframe




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split_datframe&lt;/span&gt;(dataframe):
    train, test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(dataframe, test_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)
    train, val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(train, test_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)
    print(len(train), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;train examples&amp;#39;&lt;/span&gt;)
    print(len(val), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;validation examples&amp;#39;&lt;/span&gt;)
    print(len(test), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test examples&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; train, test, val


    &lt;span style=&#34;color:#75715e&#34;&gt;# A utility method to create a tf.data dataset from a Pandas Dataframe&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;df_to_dataset&lt;/span&gt;(dataframe, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
    dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vote&amp;#39;&lt;/span&gt;)
    ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dataset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_tensor_slices((dict(dataframe), labels))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; shuffle:
        ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(buffer_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;len(dataframe))
    ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;batch(batch_size)
    print(ds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ds




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_input_pipeline&lt;/span&gt;(train, test, val, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    train_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(train, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size)
    val_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(val, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size)
    test_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(test, shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;batch_size)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; train_ds, val_ds, test_ds




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_feature_layer&lt;/span&gt;(cwd): &lt;span style=&#34;color:#75715e&#34;&gt;#select the columns for analysis from dataset&lt;/span&gt;
    feature_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features.txt&amp;#39;&lt;/span&gt;)
    dict_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cwd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;features&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use&amp;#39;&lt;/span&gt;)
    feature_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    feature_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#75715e&#34;&gt;#embedded columns&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(feature_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; fp:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cnt, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(fp):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Adding {} to features&amp;#34;.format(line))&lt;/span&gt;
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;)

            print(cnt)   
            print(line)
            feature_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(line)

            indicator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numeric_column(line)
            
            &lt;span style=&#34;color:#75715e&#34;&gt;#feature_column.categorical_column_with_vocabulary_file(&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#            key = line, vocabulary_file = os.path.join(dict_path,&amp;#34;{}.txt&amp;#34;.format(line)), default_value=0)&lt;/span&gt;

            print(indicator)
            feature_columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(indicator)


            &lt;span style=&#34;color:#75715e&#34;&gt;#feature_columns.append(feature_column.embedding_column(indicator, dimension=8))&lt;/span&gt;

    feature_comb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; combinations_with_replacement(feature_list, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) 
    lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(feature_comb)
    limit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(feature_list)
    print(limit)
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; limit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    lookup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(limit):
        lookup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;j)
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k
        k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 


    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lookup:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            one, two &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[i]
            crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crossed_column([one, two], hash_bucket_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
            crossed_feature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; feature_column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indicator_column(crossed_feature)
            feature_columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(crossed_feature)

    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    crossed_feature = feature_column.crossed_column([&amp;#39;issue&amp;#39;, &amp;#39;naturalCourt&amp;#39;], hash_bucket_size=1000)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    crossed_feature = feature_column.indicator_column(crossed_feature)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    feature_columns.append(crossed_feature)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    crossed_feature = feature_column.crossed_column([&amp;#39;issueArea&amp;#39;, &amp;#39;naturalCourt&amp;#39;],hash_bucket_size=1000)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    crossed_feature = feature_column.indicator_column(crossed_feature)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    feature_columns.append(crossed_feature)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;# court_buckets = feature_column.bucketized_column(naturalCourt, boundaries=[18, 25, 30, 35, 40, 45, 50, 55, 60, 65])&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#print(feature_columns)&lt;/span&gt;
    feature_layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DenseFeatures(feature_columns)
    &lt;span style=&#34;color:#75715e&#34;&gt;#for item in feature_columns:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    print(item)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    print(&amp;#34;\n&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; feature_layer

     
    &lt;span style=&#34;color:#75715e&#34;&gt;#crossed cols&lt;/span&gt;


    &lt;span style=&#34;color:#75715e&#34;&gt;#categorical_columns &lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;understand_input_pipeline&lt;/span&gt;(train_ds):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; feature_batch, label_batch &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; train_ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Every feature:&amp;#39;&lt;/span&gt;, list(feature_batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys()))
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;A batch of ages:&amp;#39;, feature_batch[&amp;#39;age&amp;#39;])&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A batch of targets:&amp;#39;&lt;/span&gt;, label_batch )




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_model&lt;/span&gt;(log_dir,feature_layer, train_ds, val_ds, epochs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
    
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Sequential([
        feature_layer,
        layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),
        layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),
        layers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dense(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    ])

    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;,
            loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;losses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BinaryCrossentropy(from_logits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
            metrics&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mae&amp;#39;&lt;/span&gt;])

    history &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(train_ds,
            validation_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;val_ds,
            epochs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;epochs)

    loss, accuracy,mae &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(test_ds)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accuracy&amp;#34;&lt;/span&gt;, accuracy)
    print(model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;summary())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; model,history




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot_history&lt;/span&gt;(history):

    hist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(history&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;history)
    print(hist)
    hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; history&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;epoch

    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure()
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Epoch&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mean Absolute Error&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;], hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mae&amp;#39;&lt;/span&gt;],
            label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Train Error&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;], hist[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;val_mae&amp;#39;&lt;/span&gt;],
            label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Val Error&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend()




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;explain_kernal&lt;/span&gt;(model,train_ds):
    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(train_ds)
    &lt;span style=&#34;color:#75715e&#34;&gt;# KernelExplainer is a general approach that can work with any ML framework&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Its inputs are the predictions and training data&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Summarize the training set to accelerate analysis&lt;/span&gt;
    df_train_summary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kmeans(train_ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(df_train_summary)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#model.predict(df_train_summary)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Instantiate an explainer with the model predictions and training data summary&lt;/span&gt;
    explainer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;KernelExplainer(model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict, train_ds)


&lt;span style=&#34;color:#75715e&#34;&gt;# Extract Shapley values from the explainer&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#shap_values = explainer.shap_values(df_train.values)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    cwd, log_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_environmental_variables()
    print(cwd)


    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_data(cwd)

    train,test,val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split_datframe(df)
    dataset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_dataset(df)
    train_ds, val_ds, test_ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_input_pipeline(train,test,val,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
    understand_input_pipeline(train_ds)
    feature_layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_feature_layer(cwd)
    model, model_history &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_model(log_dir,feature_layer, train_ds, val_ds)
    &lt;span style=&#34;color:#75715e&#34;&gt;#plot_history(model_history)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(model.predict(train_ds))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(model.predict)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#explain_kernal(model,train_ds)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 2</title>
      <link>https://blog.jnapolitano.io/posts/legal-reserch-part-2/</link>
      <pubDate>Tue, 17 May 2022 18:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-reserch-part-2/</guid>
      <description>&lt;h1 id=&#34;integrating-the-constitution-to-neo4j&#34; &gt;Integrating the Constitution to Neo4j
&lt;span&gt;
    &lt;a href=&#34;#integrating-the-constitution-to-neo4j&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;I am currenlty building a graph database of Supreme Court cases in neo4j to model the behavior and decison making of the court.&lt;/p&gt;
&lt;p&gt;In this post, I include the classes that I will be using to create individual nodes for the articles, sections, clauses, and subclauses of the Consititution.&lt;/p&gt;
&lt;p&gt;Later, these will be related to cases and subjecst in order to train a tensorflow algorithm to recommend case law by issue area and to predict the outcome of cases.&lt;/p&gt;
&lt;h2 id=&#34;workflow&#34; &gt;Workflow
&lt;span&gt;
    &lt;a href=&#34;#workflow&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The basic workflow requires creating a node and then submitting it to the neo4j db.   My previous posts have documented this process in detail.  Review &lt;a href=&#34;https://blog.jnapolitano.io/neo4j_integration/&#34;&gt;blog.jnapolitano.io/neo4j_integration/&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;neomodel-api-classes&#34; &gt;Neomodel Api Classes
&lt;span&gt;
    &lt;a href=&#34;#neomodel-api-classes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The neomodel classes below generate the nodes to be integrated into the database.&lt;/p&gt;
&lt;h3 id=&#34;article-class&#34; &gt;Article Class
&lt;span&gt;
    &lt;a href=&#34;#article-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ARTICLE_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ARTICLE_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ARTICLE_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;section-class&#34; &gt;Section Class
&lt;span&gt;
    &lt;a href=&#34;#section-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Section&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SECTION_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;clause-class&#34; &gt;Clause Class
&lt;span&gt;
    &lt;a href=&#34;#clause-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Clause&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    sibling_clause&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CLAUSE_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;subclause-class&#34; &gt;Subclause Class
&lt;span&gt;
    &lt;a href=&#34;#subclause-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subclause&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    sibling_clause&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#sub_clause = Relationship(&amp;#34;Subclause&amp;#34;, &amp;#34;IS_SUBCLAUSE_OF&amp;#34;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-application&#34; &gt;Sample Application
&lt;span&gt;
    &lt;a href=&#34;#sample-application&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The application below creates a dataframe with node objects that will be uploaded to the neo4j database.  In order to accomplish an upload the .save() function must be called on the object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; platform &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; node
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#75715e&#34;&gt;#from neomodel import (config, StructuredNode, StringProperty, IntegerProperty,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship,db)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;#import NeoNodes as nn&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import sparkAPI as spark&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neoModelAPI &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; neo
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shutil



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_api&lt;/span&gt;():
    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7a92f171.databases.neo4j.io&amp;#34;&lt;/span&gt;
    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;neo4j&amp;#34;&lt;/span&gt;
    psw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;uri,user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user,psw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;psw)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cwd&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;article_data&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(path)&lt;/span&gt;
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.csv&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_df&lt;/span&gt;(file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a_file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
            df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(a_file )
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;
       

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_transaction_df&lt;/span&gt;(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):  
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(justice_df)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#   df.apply(lambda x: print(x), axis =1)&lt;/span&gt;
        df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_section_node(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;section&amp;#39;&lt;/span&gt;],  
        topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;topic&amp;#39;&lt;/span&gt;], 
        citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;citation&amp;#39;&lt;/span&gt;]),
        axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
    
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_transaction_to_file&lt;/span&gt;(df, cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(),import_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;merge_articles&amp;#39;&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;article_transaction_df&amp;#39;&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,import_directory,file_name])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(outfile)&lt;/span&gt;
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(outfile)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outfile
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_closing_message&lt;/span&gt;(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, outfile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_terminal_size((&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;


    seperator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; columns
    df_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your Final df looks like: &amp;#34;&lt;/span&gt;
    outfile_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You will find the data at: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(outfile)
    pprint(seperator)
    pprint(df_message)
    pprint(df)
    pprint(seperator)
    pprint(outfile_message)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    


    


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;#neo_applified = instantiate_neo_model_api()&lt;/span&gt;
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd, input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sections_data&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(file_list)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#master_subject_table = create_master_subject_table()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#json_pipeline(file_list=file_list, master_subject_table=master_subject_table)&lt;/span&gt;
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_df(file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_list)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_transaction_df(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df)
    outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; write_transaction_to_file(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df , cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sections_transaction_df.csv&amp;#39;&lt;/span&gt;)
    messaged &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; send_closing_message(df, outfile)


    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(justice_df)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 1</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-1/</link>
      <pubDate>Mon, 16 May 2022 14:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In a previous &lt;a href=&#34;https://blog.jnapolitano.io/loc_crawler/&#34;&gt;post&lt;/a&gt;, I detailed the process of crawling the Library of Congress API to generate json files that could be intergrated into you DB of choice.&lt;/p&gt;
&lt;p&gt;In this discussion, we will integrate JSON data into a Neo4j graph database.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34; &gt;Overview
&lt;span&gt;
    &lt;a href=&#34;#overview&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The process is fairly straightforward.  The most difficult part is wrangling your json data into the right format for integration.&lt;/p&gt;
&lt;p&gt;The main function first instantiates the database config informormation.  It then gets the cwd from a context manager.  We then import the files to be integrated.  A master subject table is created to record only unique subjects to avoid duplicates.  Finally, a json pipeline extracts the data from json, transforms it to integrate into neo4j, and finally we upload using the neomodels api.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    neo_applified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instantiate_neo_model_api()
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_master_subject_table()
    json_pipeline(file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_list, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;instantiate-neo-model-api&#34; &gt;Instantiate Neo Model Api
&lt;span&gt;
    &lt;a href=&#34;#instantiate-neo-model-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I extended the neo model api with a few helper functions.  The repo is found at &lt;a href=&#34;https://github.com/justin-napolitano/neo4jAPI&#34;&gt;https://github.com/justin-napolitano/neo4jAPI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also review the snapshot below.&lt;/p&gt;
&lt;p&gt;We will be calling the initation function to set the config information, update, create Case, and Create Subject classes during this review.&lt;/p&gt;
&lt;p&gt;create subject calls the custom subject class and returns an object that can later be integrated into the db with the .save() function.&lt;/p&gt;
&lt;p&gt;Create case does exactly the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; date
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; shelve &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Shelf
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; neomodel &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (config, StructuredNode, StringProperty, IntegerProperty,
    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship, db)
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;neoAPI&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,uri,user,psw):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;db_init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri,user,psw)    
        
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_session&lt;/span&gt;(uri,user,psw):
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#config.DATABASE_URL = &amp;#39;neo4j+s://{}:{}@{}&amp;#39;.format(user, psw, uri)&lt;/span&gt;
        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DATABASE_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bolt://neo4j:beautiful@localhost:7687&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#config.DATABASE_URL = uri&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standard_query&lt;/span&gt;():
        results, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cypher_query(query, params)
        people &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inflate(row[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; results]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_case_node&lt;/span&gt;(date, dates, group,name, pdf, shelf_id, subject, title, url, subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Case(date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;date, dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dates, group&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;group,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name, pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pdf, shelf_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;shelf_id, subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subject, title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;title, url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;url)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_city_node&lt;/span&gt;(name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; City(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_country_node&lt;/span&gt;(code,name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Country(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_state_node&lt;/span&gt;(code,name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; State(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_realtor_search_url_node&lt;/span&gt;(url):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Realtor_Search_URL(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url, is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, is_parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, searched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_root_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Root(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)
        uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_child_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Child(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_parent_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Parent(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_sibling_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Sibling(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship&lt;/span&gt;(source,target):
      
        
        rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(target)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rel

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;{}&amp;#34;+&amp;#34;.connect&amp;#34; + &amp;#34;{}&amp;#34;.format(source,target))&lt;/span&gt;
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_node&lt;/span&gt;(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Subject(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(obj):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transaction:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subject&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = StringProperty(unique_index=True, required=True)&lt;/span&gt;
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SUBJECT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Processed&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotProcessed&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;City&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_STATE_OF&amp;#39;&lt;/span&gt;)
    country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_COUNTRY_OF&amp;#39;&lt;/span&gt;)
    
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Country&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_COUNTRY_OF&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Root&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sibling&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Realtor_com&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_realtor_com &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Realtor_Search_URL&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    searched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#state = Relationship(&amp;#39;State&amp;#39;, &amp;#39;OF&amp;#39;)&lt;/span&gt;
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_STATE_OF&amp;#39;&lt;/span&gt;)
    city &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CITY_OF&amp;#39;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Root&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ROOT&amp;#39;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sibling&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    realtor_com &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Realtor_com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_REALTOR.COM_URL&amp;#34;&lt;/span&gt;)
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    full_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EmailProperty()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-files&#34; &gt;Get Files
&lt;span&gt;
    &lt;a href=&#34;#get-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The get_files function returns a list of files within the input directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.json&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-master-subject-file&#34; &gt;Create Master Subject File
&lt;span&gt;
    &lt;a href=&#34;#create-master-subject-file&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Create maseter subject table generates an empty dataframe that will record every unique subject experienced in the data.&lt;/p&gt;
&lt;p&gt;I will improve upon this later, by uploading a master file that will be saved following each modification.  This would enable resuming the process following an error or fault.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_master_subject_table&lt;/span&gt;():
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(table)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;json-pipeline-function&#34; &gt;Json Pipeline function
&lt;span&gt;
    &lt;a href=&#34;#json-pipeline-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The json pipeline function is the runner for the etl job.  It loads each file into dataframe, manipulates the data accordingly, and updates the neo4j database.&lt;/p&gt;
&lt;p&gt;When I refactor the code, I will most likely create an object that calls static functions to generate then desired output.&lt;/p&gt;
&lt;p&gt;I may also seperate the case, subject, and relationship pipeline into seperate classes in order to avoid shadowing functions within functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_pipeline&lt;/span&gt;(file_list, master_subject_table):
    case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
        
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_json_data(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data[0])&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#filtered_data = filter_json_data(json_data = data, filter = filter)&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
        subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
        case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(case_data)

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)

        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table[&amp;#39;transaction&amp;#39;])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#lets save data to the database&lt;/span&gt;

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create Relationships&lt;/span&gt;

        relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_relationship_table(case_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;case_data, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;case-pipeline&#34; &gt;Case Pipeline
&lt;span&gt;
    &lt;a href=&#34;#case-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create the case nodes four functions are called.&lt;/p&gt;
&lt;h4 id=&#34;clean-json-data&#34; &gt;Clean Json Data
&lt;span&gt;
    &lt;a href=&#34;#clean-json-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The first is clean_json_data which is actually unnecessary.  The only operation that is required is moving the pdf froma list to a dicktionary key.  It should and will be refactored.  As it stands now, I am leaving iut as an artifact of a previous workflow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean_json_data&lt;/span&gt;(filtered_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Select the keys that I want from the dictionary&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter appropriatly into a df &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# write df to file&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(type(filtered_data))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(filtered_data)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filtered_data:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# each dictionary must be a row.... which makes perfect sense, but they can not be nested... &lt;/span&gt;
        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        resources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;language&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        online_format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;online_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        original_format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;original_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image_url&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        hassegments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hassegments&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        extract_timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extract_timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        timestampe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        mimetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mime_type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resources[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;: 
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noPdf&amp;#34;&lt;/span&gt;
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdf&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pdf
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;search_index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;stringify-json-data&#34; &gt;Stringify Json Data
&lt;span&gt;
    &lt;a href=&#34;#stringify-json-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The Second is Stringify_json_data.  The imporatance of this function is that it creates strings from lists in order to properly integrate into the neo4j databse.  Iterables are permitted, however they can not be searched.  For my use case, I decided to create csv strings instead that can later be parsed if necessary.&lt;/p&gt;
&lt;p&gt;This function also moves the subject list to a dedicated key in the dictionary.  This is important because it is used to generate the subject tables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stringify_json_values&lt;/span&gt;(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(dict[key]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; list:
                tmp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (dict[key]):
                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
                    tmp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(item)
                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_list

                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dict[key])
        dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list

                
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;pandify-case-data&#34; &gt;Pandify Case Data
&lt;span&gt;
    &lt;a href=&#34;#pandify-case-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The next function creates a pandas dataframe from a list of dictionaries.  Thankfully this is easy to accommplish.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pandify_case_data&lt;/span&gt;(data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_df = pd.concat(data, sort=False)&lt;/span&gt;
    df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data)
    df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodify-case-data&#34; &gt;Nodify Case Data
&lt;span&gt;
    &lt;a href=&#34;#nodify-case-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Nodify creates transaction objects that can be saved to the neo4j databse.  I call the neomodel api to generate the results and save them into a dataframe that is used to apply the upload with a lambda function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_case_data&lt;/span&gt;(case_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data.notna()]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    case_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_case_node(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;], dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;],group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;], pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;], shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;], subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;], title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;], url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;], subject_relationship&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_nodes
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-subject-pipeline&#34; &gt;The Subject Pipeline
&lt;span&gt;
    &lt;a href=&#34;#the-subject-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The subject pipeline slices the subject data from the current search result page.&lt;/p&gt;
&lt;p&gt;It then identifies the unique subjects&lt;/p&gt;
&lt;p&gt;The subject_lookup_table is a dataframe containing the subjects returned by subject list.  They are unique only to the result page.&lt;/p&gt;
&lt;p&gt;The master_subject_table is then updated by the integrate_to_master_table function that identifes new subjects to integrate into the master table.&lt;/p&gt;
&lt;p&gt;finally, the nodify subject function creates transaction objects to be uploaded to the neo4j db.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
    subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;

    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;slice_subject_data&#34; &gt;slice_subject_data
&lt;span&gt;
    &lt;a href=&#34;#slice_subject_data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice_subject_data&lt;/span&gt;(data):
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; case &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; case[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_list)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subject_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;identify-unique-subjects&#34; &gt;Identify Unique Subjects
&lt;span&gt;
    &lt;a href=&#34;#identify-unique-subjects&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identify_unique_subjects&lt;/span&gt;(subject_list):
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# insert the list to the set&lt;/span&gt;
    list_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(subject_list)
    &lt;span style=&#34;color:#75715e&#34;&gt;# convert the set to the list&lt;/span&gt;
    unique_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (list(list_set))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; unique_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;create-subject-lookup-table&#34; &gt;Create Subject Lookup Table
&lt;span&gt;
    &lt;a href=&#34;#create-subject-lookup-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_lookup_table&lt;/span&gt;(subject_list):
    lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(subject_list, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;])
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lookup_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodify-subject&#34; &gt;Nodify Subject
&lt;span&gt;
    &lt;a href=&#34;#nodify-subject&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_subjects&lt;/span&gt;(master_subject_table):
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#df[df.isna().any(axis=1)]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_subject_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;uploading-case-and-subject-data&#34; &gt;Uploading Case and Subject data
&lt;span&gt;
    &lt;a href=&#34;#uploading-case-and-subject-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;With the transaction object dataframes created, we can then update the data to the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;submit-subjects&#34; &gt;Submit Subjects
&lt;span&gt;
    &lt;a href=&#34;#submit-subjects&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This function selects the subject nodes from the master table that have not been uploaded to the neo4j database.&lt;/p&gt;
&lt;p&gt;It identifies na in the submitted collumn in order to slice non-submitted nodes.&lt;/p&gt;
&lt;p&gt;If that table can be created we upload all of the df with the update function from the neoapi.  It simply calls the db and calls save() on the object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_subjects_to_db&lt;/span&gt;(master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes=master_subject_table[[master_subject_table[&amp;#39;submitted&amp;#39;] == np.nan]]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty:   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
         &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
        master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;submit-cases&#34; &gt;Submit Cases
&lt;span&gt;
    &lt;a href=&#34;#submit-cases&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Initially i had copy and pasted the subject submission function. I realized that the checks were unnecessary.   I am assuming that each result is unique.  Therefore, every case is uploaded.  If it proves that there are duplicates in the database, the neo4j cypher language would permit me to prune those duplicate edges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_cases_to_db&lt;/span&gt;(case_data):
        &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data[&amp;#39;submitted&amp;#39;].isna()].copy()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#if non_submitted_nodes.empty:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    return case_data&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#else:&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
    &lt;span style=&#34;color:#75715e&#34;&gt;#Assume all are submitted..&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data.update(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;submit-the-relationships&#34; &gt;Submit the Relationships
&lt;span&gt;
    &lt;a href=&#34;#submit-the-relationships&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The final step is to relate the cases to the subject nodes.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;relationship_list= create_relationship_table(case_data=case_data, master_subject_table=master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is accomplished by calling the relationship function declared in the Case class declared in the neomodel api.&lt;/p&gt;
&lt;p&gt;View the reference below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = StringProperty(unique_index=True, required=True)&lt;/span&gt;
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SUBJECT&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;create-relationship-table&#34; &gt;Create Relationship Table
&lt;span&gt;
    &lt;a href=&#34;#create-relationship-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;To create the relationships the case_data and the master_subject_table are necessary.&lt;/p&gt;
&lt;p&gt;for every case a relationship is created to every subject within its subject list.&lt;/p&gt;
&lt;p&gt;It is important to note, that in order for this function to work correctly, the cases and subjects must first be submitted to the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship_table&lt;/span&gt;(case_data, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data[])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#test = master_subject_table[&amp;#39;subject&amp;#39;]&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# select &lt;/span&gt;
    relationship_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(case_data)):
        unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;][row])])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; subject_row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(unique_dataframe)):
            case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[subject_row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject)&lt;/span&gt;
            relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(case&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subject_relationship,subject)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(relationship)&lt;/span&gt;
            relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(relationship)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; relationship_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;putting-everything-together&#34; &gt;Putting Everything Together
&lt;span&gt;
    &lt;a href=&#34;#putting-everything-together&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#realtor_graph.py&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;#from neo4j_connect_2 import NeoSandboxApp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import neo4j_connect_2 as neo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices as google&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#from pyspark.sql import SparkSession&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#from pyspark.sql.functions import struct&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cgitb &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lookup
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; code
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dbm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dumb
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; doctest &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; master
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hmac &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; trans_36
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mimetypes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; platform &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; node
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pty &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; master_open
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; re &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sub
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; unittest.util &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unorderable_list_difference
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; non_hierarchical
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; neomodel &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (config, StructuredNode, StringProperty, IntegerProperty,
    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship,db)
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;#import NeoNodes as nn&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neo4jClasses
&lt;span style=&#34;color:#75715e&#34;&gt;#import sparkAPI as spark&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neoModelAPI &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; neo
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#75715e&#34;&gt;#from neoModelAPI import NeoNodes as nn&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataUploadFunctions&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload_df&lt;/span&gt;(self,df):
        &lt;span style=&#34;color:#75715e&#34;&gt;#df.apply(lambda x: pprint(str(x) + str(type(x))))&lt;/span&gt;
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(node_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  node_list
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_to_df&lt;/span&gt;(self,df1,df2,lookup_value :str, lookup_key: str):
        df1[lookup_value] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df1[lookup_key]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df1.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df1)&lt;/span&gt;
        
        val  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df1[lookup_value]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(dict(zip(df2[lookup_key],  df2[lookup_value])))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_relationships&lt;/span&gt;(self,source_node, target_node):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(source_node)&lt;/span&gt;
        rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source_node ,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target_node)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rel

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataPipelineFunctions&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_df_to_csv&lt;/span&gt;(self,df,path: str):
        cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
        path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,path])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(path,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
            df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(path, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; path

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_city_nodes&lt;/span&gt;(self,df):
        city_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_name&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; city_nodes

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_url_nodes&lt;/span&gt;(self,df):
        url_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_realtor_search_url_node(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; url_nodes
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_root_nodes&lt;/span&gt;(self,df):
        root_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_root_node(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root_nodes

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_country_nodes&lt;/span&gt;(self,df):
        country_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_country_node(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_name),axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_nodes
        

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_unique_country_df&lt;/span&gt;(self,df):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;difference([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_state_nodes&lt;/span&gt;(self,df):
        state_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_node(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name),axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state_nodes    

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_unique_state_df&lt;/span&gt;(self,df):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;difference([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_code&amp;#39;&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rename_columns&lt;/span&gt;(self,df, mapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor_url&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;}):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mapper)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_country_code&lt;/span&gt;(self,country_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_code

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_country_name&lt;/span&gt;(self,country_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United States of America&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_name

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload_df&lt;/span&gt;(self,df):
        &lt;span style=&#34;color:#75715e&#34;&gt;#df.apply(lambda x: pprint(str(x) + str(type(x))))&lt;/span&gt;
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        pprint(node_list)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  node_list
        &lt;span style=&#34;color:#75715e&#34;&gt;#df[&amp;#39;server_node&amp;#39;] =  node_list&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;
        
        


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_url_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        pprint(update_list)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; update_list
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_city_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        pprint(update_list)
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_state_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique_state_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique_state_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_node[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#75715e&#34;&gt;#update_list = self.unique_state_nodes.apply(lambda x: neo.neoAPI.create_relationship(source = x.state_node.country,target = x.country_node.name), axis=1)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(update_list)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;




    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by_state&lt;/span&gt;(self):
        grouped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;state_name&amp;#34;&lt;/span&gt;)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_data_to_pandas_df&lt;/span&gt;(self,file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; file_path &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:

            &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open (file_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
                df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_json(file)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_city_column&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df.city_nodes)&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_states_column&lt;/span&gt;(self):

        unique_states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(state_dict)&lt;/span&gt;

        unique_states[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name, code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_states)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_nodes&amp;#39;] = unique_states[&amp;#39;state_nodes&amp;#39;] where unique_states[state_name] = self.df_stateName&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;state_node&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_node&amp;#39;] =&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df[&amp;#39;state_name&amp;#39;].map(unique_states))&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(dict(zip(unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name,  unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node)))
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df)&lt;/span&gt;

        
     
        &lt;span style=&#34;color:#75715e&#34;&gt;#mask = dfd[&amp;#39;a&amp;#39;].str.startswith(&amp;#39;o&amp;#39;)&lt;/span&gt;
        
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_nodes&amp;#39;] = self.df.apply(lambda x: neo.create_state_node(name = x.state_name, code = x.state) if x not in states_dict else states_dict[x], axis=1)&lt;/span&gt;
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_url_column&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_url_node(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x, searched&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;))


    

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cwd&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.json&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_api&lt;/span&gt;():
    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7a92f171.databases.neo4j.io&amp;#34;&lt;/span&gt;
    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;neo4j&amp;#34;&lt;/span&gt;
    psw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;uri,user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user,psw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;psw)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_data_pipeline&lt;/span&gt;():
    pipeline_functions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataPipelineFunctions()
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_data_to_pandas_df()
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_country_name()
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_country_code()
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename_columns(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_nodes(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_url_nodes(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_root_nodes(master_df)

    
    master_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(master_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;master_df.csv&amp;#39;&lt;/span&gt;)

    

    
    state_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_unique_state_df(master_df)
    state_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_nodes(state_df)
    state_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(state_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_df.csv&amp;#39;&lt;/span&gt;)
    

    country_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_unique_country_df(master_df)
    country_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_country_nodes(country_df)
    country_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(country_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country.csv&amp;#39;&lt;/span&gt;)


    



    &lt;span style=&#34;color:#75715e&#34;&gt;#upload nodes&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master_df&amp;#34;&lt;/span&gt; : master_df, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_df&amp;#39;&lt;/span&gt; : state_df, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_df&amp;#39;&lt;/span&gt;: country_df}



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_json_data&lt;/span&gt;(file):
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open (file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)
  
    &lt;span style=&#34;color:#75715e&#34;&gt;# Reading from file&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_pipeline&lt;/span&gt;(file_list, master_subject_table):
    case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
        
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_json_data(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data[0])&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#filtered_data = filter_json_data(json_data = data, filter = filter)&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
        subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
        case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(case_data)

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)

        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table[&amp;#39;transaction&amp;#39;])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#lets save data to the database&lt;/span&gt;

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create Relationships&lt;/span&gt;

        relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_relationship_table(case_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;case_data, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
    




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_cases_to_db&lt;/span&gt;(case_data):
        &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data[&amp;#39;submitted&amp;#39;].isna()].copy()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#if non_submitted_nodes.empty:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    return case_data&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#else:&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
    &lt;span style=&#34;color:#75715e&#34;&gt;#Assume all are submitted..&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data.update(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data

    &lt;span style=&#34;color:#75715e&#34;&gt;#Relationships must need to be created following saving to the df&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#relationships = create_relationship_table(case_data, master_subject_table)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_subjects_to_db&lt;/span&gt;(master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes=master_subject_table[[master_subject_table[&amp;#39;submitted&amp;#39;] == np.nan]]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty:   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
         &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
        master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tester&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Dolly&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship_table&lt;/span&gt;(case_data, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data[])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#test = master_subject_table[&amp;#39;subject&amp;#39;]&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# select &lt;/span&gt;
    relationship_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(case_data)):
        unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;][row])])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; subject_row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(unique_dataframe)):
            case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[subject_row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject)&lt;/span&gt;
            relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(case&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subject_relationship,subject)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(relationship)&lt;/span&gt;
            relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(relationship)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; relationship_list




        
    &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship between the case and each uid in the unique_data_frame_transaction_list &lt;/span&gt;
    pprint(unique_dataframe)


    &lt;span style=&#34;color:#75715e&#34;&gt;## Creating the realation table&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Thoughts&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# pass subject and case table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# case_subject list collumn&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# where that list is in the master table&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#return  the subjects &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# make a connection to between each subject and the case in the returned tableuid in the table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# return a transaction list &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# with the list commit a transaction for eachn &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data= filter_case_data(data)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_case_data&lt;/span&gt;(case_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data.notna()]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    case_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_case_node(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;], dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;],group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;], pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;], shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;], subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;], title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;], url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;], subject_relationship&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_nodes
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_case_data&lt;/span&gt;(data):
    pprint(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_subjects&lt;/span&gt;(master_subject_table):
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#df[df.isna().any(axis=1)]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_subject_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrate_to_master_table&lt;/span&gt;(subject_lookup_table, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#check_if subject in list is in subject of the table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# if so drop it from the temp table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# append what is left to the master table &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_lookup_table)&lt;/span&gt;
    test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
    unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (subject_lookup_table[&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;subject_lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(test)])
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#duplicate_list = (master_subject_table[~master_subject_table[&amp;#39;subject&amp;#39;].isin(subject_lookup_table[&amp;#39;subject&amp;#39;])])&lt;/span&gt;
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([master_subject_table,unique_dataframe])
    &lt;span style=&#34;color:#75715e&#34;&gt;#master_subject_table.update(unique_dataframe)&lt;/span&gt;
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_lookup_table&lt;/span&gt;(subject_list):
    lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(subject_list, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;])
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lookup_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identify_unique_subjects&lt;/span&gt;(subject_list):
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# insert the list to the set&lt;/span&gt;
    list_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(subject_list)
    &lt;span style=&#34;color:#75715e&#34;&gt;# convert the set to the list&lt;/span&gt;
    unique_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (list(list_set))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; unique_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice_subject_data&lt;/span&gt;(data):
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; case &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; case[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_list)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subject_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pandify_case_data&lt;/span&gt;(data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_df = pd.concat(data, sort=False)&lt;/span&gt;
    df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data)
    df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stringify_json_values&lt;/span&gt;(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(dict[key]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; list:
                tmp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (dict[key]):
                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
                    tmp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(item)
                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_list

                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dict[key])
        dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list

                
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data
                

    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean_json_data&lt;/span&gt;(filtered_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Select the keys that I want from the dictionary&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter appropriatly into a df &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# write df to file&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(type(filtered_data))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(filtered_data)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filtered_data:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# each dictionary must be a row.... which makes perfect sense, but they can not be nested... &lt;/span&gt;
        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        resources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;language&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        online_format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;online_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        original_format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;original_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image_url&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        hassegments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hassegments&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        extract_timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extract_timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        timestampe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        mimetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mime_type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resources[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;: 
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noPdf&amp;#34;&lt;/span&gt;
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdf&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pdf
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;search_index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
    


    &lt;span style=&#34;color:#75715e&#34;&gt;# convert to strings maybe move into another function to be called.  Actually will definitely move to a nother function &lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; filtered_data
    &lt;span style=&#34;color:#75715e&#34;&gt;#uid = UniqueIdProperty()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##date = date&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#dates = dates&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#group = group&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#id = id &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pdf = pdf &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#shelf_id = shelf_id&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#subject = subject&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = primary_topic&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#title = title&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#url = url&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#description = description&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#source_collection = source_collection&lt;/span&gt;




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_json_data&lt;/span&gt;(json_data, filter):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Using dict()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Extracting specific keys from dictionary&lt;/span&gt;

    filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;contributor&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;digitized&amp;#39;&lt;/span&gt;]
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict((k, json_data[k]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filter &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; json_data)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_master_subject_table&lt;/span&gt;():
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(table)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    neo_applified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instantiate_neo_model_api()
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_master_subject_table()
    json_pipeline(file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_list, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#neo_sandbox_app = instantiate_neo_sandbox_app()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#google_creds = load_google_creds()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#sheets_app = instantiate_sheets_app(google_creds.credentials)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#drive_app = instantiate_drive_app(google_creds.credentials)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#googleAPI = instantiate_google_API()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#sparkAPI = instantiate_spark_API()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#neoAPI = NeoAPI()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#nodified_df = pandas_functions.nodify_dataframe()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#google_api = googleServices.GoogleAPI()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;###neo_model_api = instantiate_neo_model_api()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;###df_pipeline_dictionary = prepare_data_pipeline()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#final_df_dictionary = upload_data_pipeline_to_neo(df_pipeline_dictionary)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#for k,v in final_df_dictionary.items():&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    cwd = os.getcwd()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    path = str(k) +&amp;#34;Final&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    path = os.sep.join([cwd,path])&lt;/span&gt;

     &lt;span style=&#34;color:#75715e&#34;&gt;#   with open(path, &amp;#34;w&amp;#34;) as file:&lt;/span&gt;
     &lt;span style=&#34;color:#75715e&#34;&gt;#       v.to_csv(path, index=False)&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#prepared_dfs = prepare_pandas_df()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(prepared_df)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#upload_df_to_db(df = prepared_df, neo_model_api = neo_model_api)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 0</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-0/</link>
      <pubDate>Mon, 16 May 2022 13:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-0/</guid>
      <description>&lt;h1 id=&#34;crawling-the-library-of-congress-api&#34; &gt;Crawling the Library of Congress API
&lt;span&gt;
    &lt;a href=&#34;#crawling-the-library-of-congress-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The United States Library of Congress maintains a rest api for developers to crawl their collections.  It is an open source tool that anyone can access in order to conduct research. Check out the documenation at &lt;a href=&#34;https://libraryofcongress.github.io/data-exploration/&#34;&gt;https://libraryofcongress.github.io/data-exploration/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-crawler&#34; &gt;Creating a crawler
&lt;span&gt;
    &lt;a href=&#34;#creating-a-crawler&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I took the approach of writing a generator that produces a search result page object that can be operated upon with each iteration.&lt;/p&gt;
&lt;p&gt;The first step is to create a search result page object.&lt;/p&gt;
&lt;p&gt;The code below documents the search_result page.  It contains a number of helper functions to convert the nodes within the result to json or graphml.  The code can also be used to generate a networkx in memory graph.&lt;/p&gt;
&lt;h3 id=&#34;the-search-result-object&#34; &gt;The Search Result Object
&lt;span&gt;
    &lt;a href=&#34;#the-search-result-object&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_results_page&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=79&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_search_url(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_data()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_to_json()
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.soup_html = self.html_parse()&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_next_url()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_json&lt;/span&gt;(self, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json, outfile)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_pandas&lt;/span&gt;(self):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas_edgelist(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_csv&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.csv&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(output_name)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_graphml&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;, file_num&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.graphml&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_graphml(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph, output_name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_to_file&lt;/span&gt;(self,data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(data, outfile)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_gen_2&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#root = root &lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(k, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((k, {&amp;#39;type&amp;#39; : k}))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#(1, 2, color=&amp;#39;red&amp;#39;, weight=0.84, size=300)\&lt;/span&gt;
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(root,k, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root , k, {&amp;#34;relationship&amp;#34; : &amp;#34;of&amp;#34;}, {&amp;#34;type&amp;#34; : &amp;#39;root&amp;#39;}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(data,type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data)
                &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((data, {&amp;#34;type&amp;#34; : data}))&lt;/span&gt;
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(previous_k, data, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k)
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((previous_k ,data,{&amp;#39;relationship&amp;#39;: &amp;#34;is&amp;#34;}, {&amp;#39;type&amp;#39; : data}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root,data))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph 

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_runner&lt;/span&gt;(self,data,graph):
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            &lt;span style=&#34;color:#75715e&#34;&gt;#root = item[&amp;#39;title&amp;#39;]&lt;/span&gt;
            graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(edge_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_generator&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title_testing&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k)
                    edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root , k))
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data)
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((previous_k ,data))
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root,data))

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node_list, edge_list 
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.json_graph = self.create_json_graph()&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_json_graph&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = nx.Graph(self.response_json)&lt;/span&gt;
        graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_dict_of_dicts(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json)
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = json_graph.node_link_graph(self.response_json)&lt;/span&gt;
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw(graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.node_list = self.node_generator`&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_result_node&lt;/span&gt;(self):
     
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string()

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;append_to_data_list&lt;/span&gt;(self,rnge,d):&lt;span style=&#34;color:#75715e&#34;&gt;#rename to _data_list&lt;/span&gt;
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: rnge,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [d]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body
        &lt;span style=&#34;color:#75715e&#34;&gt;#data_list.append(request_body_tmp)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_column_to_range&lt;/span&gt;(self,column_key):
        
        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; column_key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
                

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self,num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#34;conlum_string&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(string)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_columns_to_lookup_table&lt;/span&gt;(self):

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;first_map_columns_print&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#num_columns_tmp = self.num_columns&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                num_columns_tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;second_map_Columns_print&amp;#39;)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns_tmp)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append range to request... &lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append collumn to batch lookup&lt;/span&gt;
                

                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;column_request_list_generator&lt;/span&gt;(self):
        request_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_column_to_range(k)
            request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append_to_data_list(rnge,v)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(request_body)&lt;/span&gt;
            request_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(request_body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_list





        &lt;span style=&#34;color:#75715e&#34;&gt;#return column_lookup_table&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_next_url&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next&amp;#39;&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_url&lt;/span&gt;(self,base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num):
        url_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
        page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(str(page_num))
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([json_parameter,results_per_page,page_param])
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; query_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; query
        search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url_sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([base_url,collection,query])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search_url)&lt;/span&gt;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_hello&lt;/span&gt;(self):
        pprint(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;base_url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_data&lt;/span&gt;(self):
        headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;
                }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url,headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response_to_json&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html_parse&lt;/span&gt;(self):
        soup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BeautifulSoup(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(soup)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; soup

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(self):
        flat_result_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]:
            flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(item)
            flat_result_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(flat_json)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_result_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-generator&#34; &gt;The Generator
&lt;span&gt;
    &lt;a href=&#34;#the-generator&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The generator yields a search result page if the pagination link included in the response is valid.&lt;/p&gt;
&lt;p&gt;Depending on your use case you could pass the page_num and collection you would like to crawl.&lt;/p&gt;
&lt;p&gt;The api is limited to 80 results per minute.  The sleep function limits calls to the desired rate.  The amount of results returned can be passed to the search result page_object.  Review the code above to see which values can be passed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result_generator&lt;/span&gt;(condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#column_lookup_table = {}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    column_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)
        search_results_page_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_search_results_page_object(page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; search_results_page_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-runner-function&#34; &gt;The Runner Function
&lt;span&gt;
    &lt;a href=&#34;#the-runner-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;To initiate the crawl simply run the algorithm below.  It writes each result page to json.&lt;/p&gt;
&lt;p&gt;As a follow up project, I will post how to integrate the data returned into a neo4j database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; search_result_generator():   
        page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; cd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output_2&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;hahaha&amp;#39;)&lt;/span&gt;
            obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json(file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_graphml(file_num= page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_pandas()&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_csv()&lt;/span&gt;
        write_last_page_num(page_num)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Search Results Crawled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(page_num))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;putting-everything-together&#34; &gt;Putting Everything Together
&lt;span&gt;
    &lt;a href=&#34;#putting-everything-together&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The code below is the entire program as it stands.  There is built in functionality to upload the results to a google sheet if that is what you desire using an extension of the google api.   That code can be found at &lt;a href=&#34;https://github.com/justin-napolitano/GoogleAPI&#34;&gt;https://github.com/justin-napolitano/GoogleAPI&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#library_of_congress_scraper.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print_function
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bs4 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BeautifulSoup
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lxml.etree &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; etree
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xml.etree.ElementTree &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ET
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#75715e&#34;&gt;#import load_vars as lv&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; html
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; yaml
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; yaml &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Loader, Dumper
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os.path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.discovery &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; build
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google_auth_oauthlib.flow &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; InstalledAppFlow
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.auth.transport.requests &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Request
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.oauth2.credentials &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Credentials
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.oauth2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; service_account
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.http &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MediaIoBaseDownload, MediaFileUpload
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flatten_json &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flatten
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; networkx &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; nx
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; networkx.readwrite &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json_graph
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tracemalloc
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#75715e&#34;&gt;#from ratelimiter import RateLimiter&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Context manager for changing the current working directory&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, newPath):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expanduser(newPath)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __enter__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savedPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newPath)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __exit__(self, etype, value, traceback):
        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savedPath)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_results_page&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=79&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_search_url(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_data()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_to_json()
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.soup_html = self.html_parse()&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_next_url()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_json&lt;/span&gt;(self, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json, outfile)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_pandas&lt;/span&gt;(self):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas_edgelist(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_csv&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.csv&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(output_name)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_graphml&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;, file_num&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.graphml&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_graphml(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph, output_name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_to_file&lt;/span&gt;(self,data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(data, outfile)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_gen_2&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#root = root &lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(k, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((k, {&amp;#39;type&amp;#39; : k}))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#(1, 2, color=&amp;#39;red&amp;#39;, weight=0.84, size=300)\&lt;/span&gt;
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(root,k, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root , k, {&amp;#34;relationship&amp;#34; : &amp;#34;of&amp;#34;}, {&amp;#34;type&amp;#34; : &amp;#39;root&amp;#39;}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(data,type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data)
                &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((data, {&amp;#34;type&amp;#34; : data}))&lt;/span&gt;
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(previous_k, data, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k)
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((previous_k ,data,{&amp;#39;relationship&amp;#39;: &amp;#34;is&amp;#34;}, {&amp;#39;type&amp;#39; : data}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root,data))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph 

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_runner&lt;/span&gt;(self,data,graph):
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            &lt;span style=&#34;color:#75715e&#34;&gt;#root = item[&amp;#39;title&amp;#39;]&lt;/span&gt;
            graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(edge_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_generator&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title_testing&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k)
                    edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root , k))
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data)
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((previous_k ,data))
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root,data))

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node_list, edge_list 
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.json_graph = self.create_json_graph()&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_json_graph&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = nx.Graph(self.response_json)&lt;/span&gt;
        graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_dict_of_dicts(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json)
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = json_graph.node_link_graph(self.response_json)&lt;/span&gt;
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw(graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.node_list = self.node_generator`&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_result_node&lt;/span&gt;(self):
     
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string()

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;append_to_data_list&lt;/span&gt;(self,rnge,d):&lt;span style=&#34;color:#75715e&#34;&gt;#rename to _data_list&lt;/span&gt;
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: rnge,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [d]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body
        &lt;span style=&#34;color:#75715e&#34;&gt;#data_list.append(request_body_tmp)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_column_to_range&lt;/span&gt;(self,column_key):
        
        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; column_key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
                

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self,num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#34;conlum_string&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(string)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_columns_to_lookup_table&lt;/span&gt;(self):

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;first_map_columns_print&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#num_columns_tmp = self.num_columns&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                num_columns_tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;second_map_Columns_print&amp;#39;)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns_tmp)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append range to request... &lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append collumn to batch lookup&lt;/span&gt;
                

                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;column_request_list_generator&lt;/span&gt;(self):
        request_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_column_to_range(k)
            request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append_to_data_list(rnge,v)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(request_body)&lt;/span&gt;
            request_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(request_body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_list





        &lt;span style=&#34;color:#75715e&#34;&gt;#return column_lookup_table&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_next_url&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next&amp;#39;&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_url&lt;/span&gt;(self,base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num):
        url_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
        page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(str(page_num))
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([json_parameter,results_per_page,page_param])
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; query_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; query
        search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url_sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([base_url,collection,query])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search_url)&lt;/span&gt;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_hello&lt;/span&gt;(self):
        pprint(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;base_url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_data&lt;/span&gt;(self):
        headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;
                }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url,headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response_to_json&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html_parse&lt;/span&gt;(self):
        soup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BeautifulSoup(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(soup)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; soup

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(self):
        flat_result_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]:
            flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(item)
            flat_result_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(flat_json)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_result_list



&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result&lt;/span&gt;():
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,dict_item,num_columns,colnum_string):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict_item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict_item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; colnum_string
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_column_range_string()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_column_request()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_column_request&lt;/span&gt;(self):
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;range,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_column_range_string&lt;/span&gt;(self):

        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_string &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self, num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_drive&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_drive_service(creds)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(self):
        pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello I exist&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_drive_service&lt;/span&gt;(self, creds):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Drive v3 API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Prints the names and ids of the first 10 files the user has access to.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        SCOPES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#75715e&#34;&gt;#creds = None&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# The file token.json stores the user&amp;#39;s access and refresh tokens, and is&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# created automatically when the authorization flow completes for the first&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# time.&lt;/span&gt;

        service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drive&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v3&amp;#39;&lt;/span&gt;, credentials&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;creds)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Call the Drive v3 API&lt;/span&gt;
        results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(
            pageSize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, fields&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nextPageToken, files(id, name)&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;files&amp;#39;&lt;/span&gt;, [])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; items:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No files found.&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Files:&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; items:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{1}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;], item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; service
    
    

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_folder&lt;/span&gt;(self,title):
        drive_service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service
        file_metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(title),
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mimeType&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/vnd.google-apps.folder&amp;#39;&lt;/span&gt;
        }
        file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drive_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_metadata,
                                            fields&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Folder ID: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;))



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_spreadsheet_to_folder&lt;/span&gt;(self ,folder_id,title):
        drive_service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service
    
        file_metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(title),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents&amp;#39;&lt;/span&gt;: [folder_id],
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mimeType&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/vnd.google-apps.spreadsheet&amp;#39;&lt;/span&gt;,
        }

        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drive_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_metadata)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(res)&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_sheet&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_sheet_service(creds)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_sheet_service&lt;/span&gt;(self,creds):
        service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sheets&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v4&amp;#39;&lt;/span&gt;, credentials&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;creds)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spreadsheets()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_creds&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds_path):

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_creds(creds_path)
   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_creds&lt;/span&gt;(self,creds_path):

        creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# The file token.json stores the user&amp;#39;s access and refresh tokens, and is&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# created automatically when the authorization flow completes for the first&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# time.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token.json&amp;#39;&lt;/span&gt;):
            creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Credentials&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_authorized_user_file(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token.json&amp;#39;&lt;/span&gt;, SCOPES)
        &lt;span style=&#34;color:#75715e&#34;&gt;# If there are no (valid) credentials available, let the user log in.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; creds &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; creds &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expired &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh_token:
                creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh(Request())
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no creds&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service_account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Credentials&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_service_account_file(creds_path)
                &lt;span style=&#34;color:#75715e&#34;&gt;#creds = ServiceAccountCredentials.from_json_keyfile_name(&amp;#39;add_json_file_here.json&amp;#39;, SCOPES)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#flow = InstalledAppFlow.from_client_secrets_file(&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#    &amp;#39;credentials.json&amp;#39;, SCOPES)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#creds = flow.run_local_server(port=0)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# Save the credentials for the next run&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#with open(&amp;#39;token.json&amp;#39;, &amp;#39;w&amp;#39;) as token:&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#    token.write(creds.to_json())&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; creds

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,file_path):
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.yaml_stream = file(&amp;#34;config.yaml&amp;#34;, &amp;#39;r&amp;#39;)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_config(file_path)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_config&lt;/span&gt;(self,file_path):
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;test&amp;#34;)&lt;/span&gt;
        stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(stream,Loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Loader)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_credentials_object&lt;/span&gt;(creds_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;credentials.json&amp;#39;&lt;/span&gt;):
    google_credentials_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_creds(creds_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; google_credentials_object
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_config_object&lt;/span&gt;(file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config.yaml&amp;#39;&lt;/span&gt;):
    config_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; config(file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; config_object


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result_generator&lt;/span&gt;(condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#column_lookup_table = {}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    column_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)
        search_results_page_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_search_results_page_object(page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; search_results_page_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_results_page_object&lt;/span&gt;(base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=70&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#search = search_results(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search.search_url)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_results_page(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_drive_object&lt;/span&gt;(google_creds):
    drive_service_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_drive(google_creds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; drive_service_object

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_sheet_object&lt;/span&gt;(google_creds):
    sheet_service_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_sheet(google_creds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sheet_service_object

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_new_google_sheet&lt;/span&gt;(google_drive_object,folder_id,title):
    sheet_meta_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_drive_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_spreadsheet_to_folder(folder_id, title)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sheet_meta_data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(result_json):
    flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(result_json)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_json

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_last_page_num&lt;/span&gt;(page_num):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last_page_num.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
        f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(str(page_num))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
    tracemalloc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
    &lt;span style=&#34;color:#75715e&#34;&gt;#rate_limiter = RateLimiter(max_calls=1, period=60)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#cd to output&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#result = create_search_results_page_object()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#with cd(&amp;#34;output&amp;#34;):&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    result.write_to_file(data = result.dict_of_dicts, file_num = 1)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; search_result_generator():   
        page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; cd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output_2&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;hahaha&amp;#39;)&lt;/span&gt;
            obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json(file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_graphml(file_num= page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_pandas()&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_csv()&lt;/span&gt;
        write_last_page_num(page_num)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Search Results Crawled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(page_num))


    
    snapshot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tracemalloc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take_snapshot()
    top_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; snapshot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;statistics(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lineno&amp;#39;&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ Top 10 ]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; stat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; top_stats[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]:
        print(stat)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    main()

        
        

    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>

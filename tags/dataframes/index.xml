<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dataframes on Justin&#39;s Data Blog</title>
    <link>https://blog.jnapolitano.io/tags/dataframes/</link>
    <description>Justin&#39;s Data Blog (dataframes)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 May 2022 01:30:32 +0000</lastBuildDate>
    
    <atom:link href="https://blog.jnapolitano.io/tags/dataframes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quantitative Julia Problems</title>
      <link>https://blog.jnapolitano.io/posts/pi-with-julia/</link>
      <pubDate>Tue, 24 May 2022 01:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/pi-with-julia/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The following problems are samples to test a julia install and to determine if packages have been installed.&lt;/p&gt;
&lt;h2 id=&#34;estimate-the-value-of-pi&#34; &gt;Estimate the Value of Pi
&lt;span&gt;
    &lt;a href=&#34;#estimate-the-value-of-pi&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Use the Monte Carlo method to estimate the value of pi.&lt;/p&gt;
&lt;h3 id=&#34;solution&#34; &gt;Solution
&lt;span&gt;
    &lt;a href=&#34;#solution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;We estimate the area by sampling bivariate uniforms and looking at the fraction that fall into the unit circle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Julia&#34; data-lang=&#34;Julia&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Number of iterations&lt;/span&gt;
n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#counter variable&lt;/span&gt;
count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n &lt;span style=&#34;color:#75715e&#34;&gt;# for i in the range of 1 to n&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; count  &lt;span style=&#34;color:#75715e&#34;&gt;# make count global to reference within the loop.  Otherwise the the variable will be understood to be a local within the for loop&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#rand(2) Returns a two element vector.  &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#Can be read as let u be equal to the first index of the vector and let v be equal to the second&lt;/span&gt;
    u, v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    
    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqrt((u &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# distance from middle of square&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;
        count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

area_estimate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; n

print(area_estimate &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# dividing by radius**2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;use-quadgk-to-aproximate-an-integral&#34; &gt;Use QuadGk to Aproximate an integral
&lt;span&gt;
    &lt;a href=&#34;#use-quadgk-to-aproximate-an-integral&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The trapezoidal rule can be used to aproximate an integral.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Julia&#34; data-lang=&#34;Julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; QuadGK

f(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# The Function&lt;/span&gt;

value, accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quadgk(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# pass the function, the lower bound and the upper bound&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Configuring Rocky Linux 8 for Quantitative Analysis in Julia</title>
      <link>https://blog.jnapolitano.io/posts/rocky-linux-8-julia/</link>
      <pubDate>Tue, 24 May 2022 00:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/rocky-linux-8-julia/</guid>
      <description>&lt;h2 id=&#34;install-jupyter&#34; &gt;Install Jupyter
&lt;span&gt;
    &lt;a href=&#34;#install-jupyter&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Start with installing jupyter.  It will serve as our server for development.&lt;/p&gt;
&lt;h3 id=&#34;install-dependencies&#34; &gt;Install Dependencies
&lt;span&gt;
    &lt;a href=&#34;#install-dependencies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo dnf install gcc python3-devel kernel-headers-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;uname -r&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-jupyter-via-pip&#34; &gt;Install Jupyter Via Pip
&lt;span&gt;
    &lt;a href=&#34;#install-jupyter-via-pip&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip3 install --user jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-julia&#34; &gt;Install Julia
&lt;span&gt;
    &lt;a href=&#34;#install-julia&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;We will be installing from the official binaries.&lt;/p&gt;
&lt;p&gt;Make a directory in user profile.  i simply ran &lt;code&gt;mkdir julia&lt;/code&gt; in the &lt;code&gt;home&lt;/code&gt; folder.  The &lt;code&gt;cd&lt;/code&gt; to &lt;code&gt;julia&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When in the folder run&lt;/p&gt;
&lt;h3 id=&#34;wget&#34; &gt;Wget
&lt;span&gt;
    &lt;a href=&#34;#wget&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://julialang-s3.julialang.org/bin/linux/x64/1.7/julia-1.7.2-linux-x86_64.tar.gz

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;unpack&#34; &gt;Unpack
&lt;span&gt;
    &lt;a href=&#34;#unpack&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Then unpack&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tar zxvf julia-1.7.2-linux-x86_64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-to-path&#34; &gt;Add to Path
&lt;span&gt;
    &lt;a href=&#34;#add-to-path&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;In my case I added the following to my shell profile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;:/home/jnapolitano/julia/julia-1.7.2/bin/&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;downloading-the-quantecon-project&#34; &gt;Downloading the QuantEcon Project
&lt;span&gt;
    &lt;a href=&#34;#downloading-the-quantecon-project&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I will be working through the QuantEcon textbook provided at &lt;a href=&#34;https://julia.quantecon.org/&#34;&gt;https://julia.quantecon.org/&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;clone-the-repository&#34; &gt;Clone the repository
&lt;span&gt;
    &lt;a href=&#34;#clone-the-repository&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
git clone https://github.com/quantecon/lecture-julia.notebooks

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;activate-the-project&#34; &gt;Activate the Project.
&lt;span&gt;
    &lt;a href=&#34;#activate-the-project&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Run a julia repl by typing &lt;code&gt;julia&lt;/code&gt; into your terminal&amp;hellip; if you added it to the path.  Otherwise navigate to the bin and activate julia.&lt;/p&gt;
&lt;h3 id=&#34;install-the-dependencies&#34; &gt;Install the Dependencies
&lt;span&gt;
    &lt;a href=&#34;#install-the-dependencies&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Next run the following commands from the Julia REPL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Pkg

Pkg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;activate(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)

Pkg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate()

&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;IT will take some time to download and extract all of the packages give it time.  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Legal Research with AI Part 7: Wrangling Data with Julia</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-7/</link>
      <pubDate>Sun, 22 May 2022 16:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-7/</guid>
      <description>&lt;h2 id=&#34;intro&#34; &gt;Intro
&lt;span&gt;
    &lt;a href=&#34;#intro&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In a &lt;a href=&#34;https://blog.jnapolitano.io/posts/legal-research-part-5/&#34;&gt;previous post&lt;/a&gt;, I seperated all of the results returned from the Library of Congress API into individual JSON documents to be imported as nodes into a neo4j graph.&lt;/p&gt;
&lt;p&gt;In this post, I filter the &lt;code&gt;LOC&lt;/code&gt; data against another data set from Oyez that will be integrated in the next post.&lt;/p&gt;
&lt;h2 id=&#34;filtering-data&#34; &gt;Filtering Data
&lt;span&gt;
    &lt;a href=&#34;#filtering-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Both data sets have been seperated into individual case nodes stored in the json format as a file with the format : &lt;citation&gt;.json.&lt;/p&gt;
&lt;p&gt;The Library of Congress data contains indices, admonitions, briefs, and other data that I will not yet be incorporating into my data set.&lt;/p&gt;
&lt;p&gt;In order to find only the case data I will be creating a dataframe containing the paths of json files with matching citations.&lt;/p&gt;
&lt;h2 id=&#34;using-julia-instead-of-python&#34; &gt;Using Julia Instead of Python
&lt;span&gt;
    &lt;a href=&#34;#using-julia-instead-of-python&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I love Python, but I want to try something new.  Julia&amp;rsquo;s &lt;a href=&#34;https://docs.julialang.org/en/v1/manual/methods/&#34;&gt;multiple dispatch&lt;/a&gt; design tempted me to try it out.  This is my first Julia program.  I will be documenting the work more so than usual.&lt;/p&gt;
&lt;h3 id=&#34;julia-import-functions&#34; &gt;Julia &amp;ldquo;import&amp;rdquo; Functions
&lt;span&gt;
    &lt;a href=&#34;#julia-import-functions&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Coming from Python, I typically import libraries/packages with an &lt;code&gt;import&lt;/code&gt; call.  Something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Julia, we use the &lt;code&gt;using&lt;/code&gt; call to import the package. Like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; DataFrames
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; CSV

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A package can also be imported, but this does not instantiate the methods and functions within it (As far as I understand it).&lt;/p&gt;
&lt;p&gt;For instance &lt;code&gt;import CSV&lt;/code&gt; would only load the package but I would have to call CSV.method to actually do something.  Something like &lt;code&gt;from pandas import to_csv&lt;/code&gt; in Python.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; DataFrames
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; CSV

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-main-function&#34; &gt;The Main Function
&lt;span&gt;
    &lt;a href=&#34;#the-main-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Just like in C -and like we should in Python-, I declared a main function to run the program.  I call it with main().  I do not know if there is a similar convention to Python&amp;rsquo;s &lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;&lt;/code&gt;.  I will find out soon.&lt;/p&gt;
&lt;p&gt;The main difference in function declaration between Python and Julia is the inclusion of the &lt;code&gt;end&lt;/code&gt; keyword and the end of the function.&lt;/p&gt;
&lt;p&gt;For instance review the main function below :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main()
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# outpath fo the current file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;case_files.csv&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    oyez_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oyez_cited&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    loc_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loc_cited&amp;#34;&lt;/span&gt;)

    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Join on File excluding extraneous data not in the oyez dataset&lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; innerjoin(oyez_dataframe, loc_dataframe, on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:File&lt;/span&gt;, validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(true, true), makeunique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Select every file but the .DS_Store from the dataframe.  &lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(row &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;File &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DS_Store&amp;#34;&lt;/span&gt;), master_df)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Write to file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_file(master_df,outpath)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

main()


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;creating-an-outpath&#34; &gt;Creating an outpath
&lt;span&gt;
    &lt;a href=&#34;#creating-an-outpath&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The main function creates an outpath to write the resultant master df to file by calling &lt;code&gt;joinpath(pwd(), &amp;quot;case_files.csv&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-get-files-function&#34; &gt;The Get Files Function
&lt;span&gt;
    &lt;a href=&#34;#the-get-files-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Next, the get_files function is called to create two data frames:  the loc_df and the oyez_df.&lt;/p&gt;
&lt;h4 id=&#34;declaring-empty-string-arrays&#34; &gt;Declaring empty string arrays
&lt;span&gt;
    &lt;a href=&#34;#declaring-empty-string-arrays&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Each file name is appended to a file_name array declared with &lt;code&gt;&amp;lt;array_name&amp;gt; = String[]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;reading-files-with-readdir&#34; &gt;Reading Files with readdir()
&lt;span&gt;
    &lt;a href=&#34;#reading-files-with-readdir&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;File names are from from a directory passed to the built in &lt;code&gt;readdir()&lt;/code&gt; function.&lt;/p&gt;
&lt;h4 id=&#34;appending-files-to-file_name-array&#34; &gt;Appending Files to file_name Array
&lt;span&gt;
    &lt;a href=&#34;#appending-files-to-file_name-array&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Each file name is appended to a file_name array declared with &lt;code&gt;file_name = String[]&lt;/code&gt; and appended to with the push!(file_name,f) call.  Note the &lt;code&gt;!&lt;/code&gt; following push.  This typically means that the function is operating on the data in memory and will not return a new value.&lt;/p&gt;
&lt;h4 id=&#34;appending-file-paths-to-file_path-array&#34; &gt;Appending File Paths to file_path Array
&lt;span&gt;
    &lt;a href=&#34;#appending-file-paths-to-file_path-array&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;I also include the file path by appending what is returned by &lt;code&gt;path = joinpath(working_path, f)&lt;/code&gt; to the file_path list.&lt;/p&gt;
&lt;p&gt;I love the built in &lt;code&gt;joinpath&lt;/code&gt; function.  Pythons &lt;code&gt;os.sep.join()&lt;/code&gt; works well, but I really like Julia&amp;rsquo;s implementation.&lt;/p&gt;
&lt;h4 id=&#34;sorting-the-arrays-with-merge-sort&#34; &gt;Sorting the Arrays with Merge Sort
&lt;span&gt;
    &lt;a href=&#34;#sorting-the-arrays-with-merge-sort&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Arrays are soreted by call &lt;code&gt;sort_array(&amp;lt;array&amp;gt;)&lt;/code&gt;.  It returns a sorted array using the merge sort alogorithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; sort_array(array)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sort(array; alg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MergeSort)

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;crating-a-dataframe-with-the-arrays&#34; &gt;Crating a Dataframe with the Arrays
&lt;span&gt;
    &lt;a href=&#34;#crating-a-dataframe-with-the-arrays&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Finally a dataframe containing the sorted file_name and file_path lists as the columns file and path is created and then returned.&lt;/p&gt;
&lt;h4 id=&#34;a-note-on-refactoring&#34; &gt;A note on refactoring
&lt;span&gt;
    &lt;a href=&#34;#a-note-on-refactoring&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This function should be refactored into seperate ones, but it works well enough with this workflow that I am going to leave it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; get_files(directory)
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]

    working_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(), directory)
    &lt;span style=&#34;color:#75715e&#34;&gt;# context management.  Cd and then go back to the orignal pwd&lt;/span&gt;
    cd(working_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Current directory: &amp;#34;, working_path)&lt;/span&gt;
        foreach(readdir()) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; f
            path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(working_path, f)
            push!(file_name,f)
            push!(file_path, path)
            &lt;span style=&#34;color:#75715e&#34;&gt;#dump(stat(f.desc)) # you can customize what you want to print&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#println(&amp;#39;\n&amp;#39;, pwd())&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#display(file_paths)&lt;/span&gt;
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_name)
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_path)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataFrame(File &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name, Path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;joining-data-frames-by-citation&#34; &gt;Joining Data Frames by Citation
&lt;span&gt;
    &lt;a href=&#34;#joining-data-frames-by-citation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Julia&amp;rsquo;s DataFrames package can easily join dataframes on a column.  In this workflow the file which is titled after a case citation is used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Join on File excluding extraneous data not in the oyez dataset&lt;/span&gt;
master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; innerjoin(oyez_dataframe, loc_dataframe, on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:File&lt;/span&gt;, validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(true, true), makeunique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;filtering-the-df-for-extraneous-files&#34; &gt;Filtering the DF for Extraneous Files
&lt;span&gt;
    &lt;a href=&#34;#filtering-the-df-for-extraneous-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The master_df  is filtered to remove &lt;code&gt;.DS_Store&lt;/code&gt; from the list of files to be processed.  Below notice the &lt;code&gt;!&lt;/code&gt; in this case it will return all a data frame of values that are not equal to .DS_Store in the File column.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Select every file but the .DS_Store from the dataframe.  &lt;/span&gt;
master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(row &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;File &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DS_Store&amp;#34;&lt;/span&gt;), master_df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-df_to_file-function&#34; &gt;The df_to_file Function
&lt;span&gt;
    &lt;a href=&#34;#the-df_to_file-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Finally the df is written to file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Write to file&lt;/span&gt;
outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_file(master_df,outpath)


&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; df_to_file(df,outpath)
    CSV&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(outpath, df)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outpath

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-complete-program&#34; &gt;The Complete Program
&lt;span&gt;
    &lt;a href=&#34;#the-complete-program&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; DataFrames
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; CSV

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; get_files(directory)
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;[]

    working_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(), directory)
    &lt;span style=&#34;color:#75715e&#34;&gt;# context management.  Cd and then go back to the orignal pwd&lt;/span&gt;
    cd(working_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Current directory: &amp;#34;, working_path)&lt;/span&gt;
        foreach(readdir()) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; f
            path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(working_path, f)
            push!(file_name,f)
            push!(file_path, path)
            &lt;span style=&#34;color:#75715e&#34;&gt;#dump(stat(f.desc)) # you can customize what you want to print&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#println(&amp;#39;\n&amp;#39;, pwd())&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#display(file_paths)&lt;/span&gt;
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_name)
    file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort_array(file_path)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataFrame(File &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name, Path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;



&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; sort_array(array)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sort(array; alg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MergeSort)

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;



&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; df_to_file(df,outpath)
    CSV&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(outpath, df)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outpath

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main()
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# outpath fo the current file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; joinpath(pwd(),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;case_files.csv&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    oyez_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oyez_cited&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Glob files from directory&lt;/span&gt;
    loc_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loc_cited&amp;#34;&lt;/span&gt;)

    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Join on File excluding extraneous data not in the oyez dataset&lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; innerjoin(oyez_dataframe, loc_dataframe, on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:File&lt;/span&gt;, validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(true, true), makeunique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Select every file but the .DS_Store from the dataframe.  &lt;/span&gt;
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(row &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;File &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DS_Store&amp;#34;&lt;/span&gt;), master_df)

    &lt;span style=&#34;color:#75715e&#34;&gt;#Write to file&lt;/span&gt;
    outpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_to_file(master_df,outpath)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

main()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
